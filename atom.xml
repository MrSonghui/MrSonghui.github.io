<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sunny SongHui</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://songhui.club/"/>
  <updated>2020-01-27T03:21:15.880Z</updated>
  <id>http://songhui.club/</id>
  
  <author>
    <name>Sunny 宋</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spark安装（单机版）</title>
    <link href="http://songhui.club/%E5%A4%A7%E6%95%B0%E6%8D%AE/2020/spark-install.html"/>
    <id>http://songhui.club/%E5%A4%A7%E6%95%B0%E6%8D%AE/2020/spark-install.html</id>
    <published>2020-01-26T07:37:01.000Z</published>
    <updated>2020-01-27T03:21:15.880Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>本文介绍了当下正流行的大数据技术框架spark单机版的安装，版本为2.4.4</p><a id="more"></a><h1 id="1-下载安装"><a href="#1-下载安装" class="headerlink" title="1. 下载安装"></a>1. 下载安装</h1><p><a href="http://spark.apache.org/downloads.html" target="_blank" rel="noopener">官网下载</a></p><p>选择版本和type，这里为 spark-2.4.4-bin-without-hadoop.tgz</p><h3 id="1-1-命令下载："><a href="#1-1-命令下载：" class="headerlink" title="1.1 命令下载："></a>1.1 命令下载：</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cd</span> <span class="string">~/software</span></span><br><span class="line"><span class="attr">wget</span> <span class="string">http://apache.communilink.net/spark/spark-2.4.4/spark-2.4.4-bin-without-hadoop.tgz</span></span><br></pre></td></tr></table></figure><h3 id="1-2-解压重命名"><a href="#1-2-解压重命名" class="headerlink" title="1.2 解压重命名"></a>1.2 解压重命名</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tar</span> <span class="string">-xzvf spark-2.4.4-bin-without-hadoop.tgz</span></span><br><span class="line"><span class="attr">mv</span> <span class="string">spark-2.4.4-bin-without-hadoop.tgz spark</span></span><br></pre></td></tr></table></figure><h3 id="1-3-配置环境变量"><a href="#1-3-配置环境变量" class="headerlink" title="1.3 配置环境变量"></a>1.3 配置环境变量</h3><h5 id="使用vim编辑-bashrc文件，加入以下配置-目录换成自己的安装目录）："><a href="#使用vim编辑-bashrc文件，加入以下配置-目录换成自己的安装目录）：" class="headerlink" title="使用vim编辑~/.bashrc文件，加入以下配置(目录换成自己的安装目录）："></a>使用vim编辑~/.bashrc文件，加入以下配置(目录换成自己的安装目录）：</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">export</span> <span class="string">SPARK_HOME=/software/spark </span></span><br><span class="line"><span class="attr">export</span> <span class="string">PATH=$PATH:$SPARK_HOME/bin</span></span><br></pre></td></tr></table></figure><h5 id="使用source命令使配置生效：-source-bashrc"><a href="#使用source命令使配置生效：-source-bashrc" class="headerlink" title="使用source命令使配置生效： source ~/.bashrc"></a>使用source命令使配置生效： source ~/.bashrc</h5><h5 id="可以使用echo-PATH-输出查看是否正确"><a href="#可以使用echo-PATH-输出查看是否正确" class="headerlink" title="可以使用echo $PATH 输出查看是否正确"></a>可以使用echo $PATH 输出查看是否正确</h5><h1 id="2-简单配置"><a href="#2-简单配置" class="headerlink" title="2. 简单配置"></a>2. 简单配置</h1><h3 id="2-1-安装scala并配置环境变量"><a href="#2-1-安装scala并配置环境变量" class="headerlink" title="2.1 安装scala并配置环境变量"></a>2.1 安装scala并配置环境变量</h3><h3 id="2-2-配置spark-env-sh变量环境"><a href="#2-2-配置spark-env-sh变量环境" class="headerlink" title="2.2 配置spark-env.sh变量环境"></a>2.2 配置spark-env.sh变量环境</h3><h4 id="位置：-SPARK-HOME-conf-spark-env-sh-template"><a href="#位置：-SPARK-HOME-conf-spark-env-sh-template" class="headerlink" title="位置： $SPARK_HOME/conf/spark-env.sh.template"></a>位置： $SPARK_HOME/conf/spark-env.sh.template</h4><h4 id="命令："><a href="#命令：" class="headerlink" title="命令："></a>命令：</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cd</span> <span class="string">/software/spark/conf</span></span><br><span class="line"><span class="comment"># 复制并重命名</span></span><br><span class="line"><span class="attr">cp</span> <span class="string">spark-env.sh.template spark-env.sh</span></span><br><span class="line"><span class="attr">vim</span> <span class="string">spark-env.sh</span></span><br></pre></td></tr></table></figure><h4 id="配置："><a href="#配置：" class="headerlink" title="配置："></a>配置：</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hadoop java scala等须安装好并配置好 环境变量</span></span><br><span class="line"><span class="attr">export</span> <span class="string">JAVA_HOME=/usr/local/java/jdk1.8</span></span><br><span class="line"><span class="attr">export</span> <span class="string">SCALA_HOME=/software/scala</span></span><br><span class="line"><span class="attr">export</span> <span class="string">SPARK_HOME=/software/spark</span></span><br><span class="line"><span class="comment"># 单机版配置为本机 ip</span></span><br><span class="line"><span class="attr">export</span> <span class="string">SPARK_MASTER_IP=127.0.0.1</span></span><br><span class="line"><span class="attr">export</span> <span class="string">SPARK_EXECUTOR_MEMORY=1G</span></span><br><span class="line"><span class="attr">export</span> <span class="string">SPARK_DIST_CLASSPATH=$(hadoop classpath)</span></span><br></pre></td></tr></table></figure><h3 id="2-3-配置slaves"><a href="#2-3-配置slaves" class="headerlink" title="2.3 配置slaves"></a>2.3 配置slaves</h3><h4 id="文件位置：-SPARK-HOME-conf-slaves-template"><a href="#文件位置：-SPARK-HOME-conf-slaves-template" class="headerlink" title="文件位置： $SPARK_HOME/conf/slaves.template"></a>文件位置： $SPARK_HOME/conf/slaves.template</h4><h4 id="命令：-1"><a href="#命令：-1" class="headerlink" title="命令："></a>命令：</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cd</span> <span class="string">/software/spark/conf</span></span><br><span class="line"><span class="comment"># 复制并重命名</span></span><br><span class="line"><span class="attr">cp</span> <span class="string">slaves.template slaves</span></span><br><span class="line"><span class="attr">vim</span> <span class="string">slaves</span></span><br></pre></td></tr></table></figure><h4 id="配置：-1"><a href="#配置：-1" class="headerlink" title="配置："></a>配置：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost</span><br></pre></td></tr></table></figure><h3 id="2-4-执行示例程序"><a href="#2-4-执行示例程序" class="headerlink" title="2.4 执行示例程序"></a>2.4 执行示例程序</h3><p>在 $SPARK_HOME/examples/src/main 目录下有一些 Spark 的示例程序，有 Scala、Java、Python、R 等语言的版本。我们可以先运行一个示例程序 SparkPi（即计算 π 的近似值），执行如下命令：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[root@VM_0_8_centos</span> <span class="string">spark]# ./bin/run-example SparkPi 2&gt;&amp;1 | grep "Pi is roughly"</span></span><br><span class="line"><span class="attr">Pi</span> <span class="string">is roughly 3.1369756848784243</span></span><br><span class="line"><span class="meta">[root@VM_0_8_centos</span> <span class="string">spark]#</span></span><br></pre></td></tr></table></figure><p> <strong>注：执行时会输出非常多的运行信息，输出结果不容易找到，可以通过 grep 命令进行过滤（命令中的 2&gt;&amp;1 可以将所有的信息都输出到 stdout 中，否则由于输出日志的性质，还是会输出到屏幕中）：</strong> </p><h3 id="2-5-启动-停止："><a href="#2-5-启动-停止：" class="headerlink" title="2.5 启动/停止："></a>2.5 启动/停止：</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动shell</span></span><br><span class="line"><span class="attr">spark-shell</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line"><span class="attr">ctrl+d</span></span><br></pre></td></tr></table></figure><h1 id="Tips-常见错误"><a href="#Tips-常见错误" class="headerlink" title="Tips:常见错误"></a>Tips:常见错误</h1><p><a href="https://www.cnblogs.com/qifengle-2446/p/6424377.html" target="_blank" rel="noopener">参见</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;本文介绍了当下正流行的大数据技术框架spark单机版的安装，版本为2.4.4&lt;/p&gt;
    
    </summary>
    
    
      <category term="大数据" scheme="http://songhui.club/source/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="大数据" scheme="http://songhui.club/source/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="Spark" scheme="http://songhui.club/source/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>Hive安装（单机版）</title>
    <link href="http://songhui.club/%E5%A4%A7%E6%95%B0%E6%8D%AE/2020/hive-install.html"/>
    <id>http://songhui.club/%E5%A4%A7%E6%95%B0%E6%8D%AE/2020/hive-install.html</id>
    <published>2020-01-26T07:36:20.000Z</published>
    <updated>2020-01-27T03:22:02.450Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>本文介绍的是当下正流行的大数据技术Hive的单机版安装，所用版本为3.1.2</p><a id="more"></a><h1 id="1-下载安装"><a href="#1-下载安装" class="headerlink" title="1. 下载安装"></a>1. 下载安装</h1><h3 id="1-1-这里选择安装的是3-1-2，使用下面命令进行下载："><a href="#1-1-这里选择安装的是3-1-2，使用下面命令进行下载：" class="headerlink" title="1.1 这里选择安装的是3.1.2，使用下面命令进行下载："></a>1.1 这里选择安装的是3.1.2，使用下面命令进行下载：</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cd ~/software</span></span><br><span class="line"><span class="attr">wget</span> <span class="string">http://mirror.bit.edu.cn/apache/hive/hive-3.1.2/apache-hive-3.1.2-bin.tar.gz</span></span><br></pre></td></tr></table></figure><h3 id="1-2-解压重命名"><a href="#1-2-解压重命名" class="headerlink" title="1.2 解压重命名"></a>1.2 解压重命名</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tar</span> <span class="string">-xzvf apache-hive-3.1.2-bin.tar.gz</span></span><br><span class="line"><span class="attr">mv</span> <span class="string">apache-hive-3.1.2-bin.tar.gz hive</span></span><br></pre></td></tr></table></figure><h3 id="1-3-配置环境变量"><a href="#1-3-配置环境变量" class="headerlink" title="1.3 配置环境变量"></a>1.3 配置环境变量</h3><h5 id="使用vim编辑-bashrc文件，加入以下配置-目录换成自己的安装目录）："><a href="#使用vim编辑-bashrc文件，加入以下配置-目录换成自己的安装目录）：" class="headerlink" title="使用vim编辑~/.bashrc文件，加入以下配置(目录换成自己的安装目录）："></a>使用vim编辑~/.bashrc文件，加入以下配置(目录换成自己的安装目录）：</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hive home /software/hive</span></span><br><span class="line"><span class="attr">export</span> <span class="string">HIVE_HOME=/software/hive</span></span><br><span class="line"><span class="attr">export</span> <span class="string">PATH=$PATH:$HIVE_HOME/bin</span></span><br></pre></td></tr></table></figure><h5 id="使用source命令使配置生效：-source-bashrc"><a href="#使用source命令使配置生效：-source-bashrc" class="headerlink" title="使用source命令使配置生效： source ~/.bashrc"></a>使用source命令使配置生效： source ~/.bashrc</h5><h5 id="可以使用echo-PATH-输出查看是否正确"><a href="#可以使用echo-PATH-输出查看是否正确" class="headerlink" title="可以使用echo $PATH 输出查看是否正确"></a>可以使用echo $PATH 输出查看是否正确</h5><h1 id="2-简单配置"><a href="#2-简单配置" class="headerlink" title="2. 简单配置"></a>2. 简单配置</h1><h3 id="2-1-配置hive-env-sh"><a href="#2-1-配置hive-env-sh" class="headerlink" title="2.1 配置hive-env.sh"></a>2.1 配置hive-env.sh</h3><h4 id="文件位置：-HIVE-HOME-hive-conf-hive-env-sh-template"><a href="#文件位置：-HIVE-HOME-hive-conf-hive-env-sh-template" class="headerlink" title="文件位置：$HIVE_HOME/hive/conf/hive-env.sh.template"></a>文件位置：$HIVE_HOME/hive/conf/hive-env.sh.template</h4><h4 id="命令："><a href="#命令：" class="headerlink" title="命令："></a>命令：</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cd</span> <span class="string">/software/hive/conf</span></span><br><span class="line"><span class="comment"># 复制并重命名</span></span><br><span class="line"><span class="attr">cp</span> <span class="string">hive-env.sh.template hive-env.sh</span></span><br><span class="line"><span class="attr">vim</span> <span class="string">hive-env.sh</span></span><br></pre></td></tr></table></figure><h4 id="配置如下："><a href="#配置如下：" class="headerlink" title="配置如下："></a>配置如下：</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 相应的目录换成自己的</span></span><br><span class="line"><span class="comment"># hadoop 目录</span></span><br><span class="line"><span class="attr">HADOOP_HOME</span>=<span class="string">/software/hadoop</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hive 配置目录</span></span><br><span class="line"><span class="attr">export</span> <span class="string">HIVE_CONF_DIR=/software/hive/conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hive 的lib目录</span></span><br><span class="line"><span class="attr">export</span> <span class="string">HIVE_AUX_JARS_PATH=/software/hive/lib</span></span><br></pre></td></tr></table></figure><h3 id="2-2-创建并配置hive-site-xml"><a href="#2-2-创建并配置hive-site-xml" class="headerlink" title="2.2 创建并配置hive-site.xml"></a>2.2 创建并配置hive-site.xml</h3><h4 id="文件位置：-HIVE-HOME-hive-conf"><a href="#文件位置：-HIVE-HOME-hive-conf" class="headerlink" title="文件位置： $HIVE_HOME/hive/conf/"></a>文件位置： $HIVE_HOME/hive/conf/</h4><h4 id="命令：-1"><a href="#命令：-1" class="headerlink" title="命令："></a>命令：</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cd</span> <span class="string">/software/hive/conf</span></span><br><span class="line"><span class="comment"># 会自动创建</span></span><br><span class="line"><span class="attr">vim</span> <span class="string">hive-site.xml</span></span><br></pre></td></tr></table></figure><h4 id="配置："><a href="#配置：" class="headerlink" title="配置："></a>配置：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- jdbc-url --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://localhost:3306/hive?createDatabaseIfNotExist=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="symbol">&amp;amp;</span>useSSL=false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- jdbc-driver --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库用户名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据密码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>*******<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>datanucleus.readOnlyDatastore<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>datanucleus.fixedDatastore<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>datanucleus.autoCreateSchema<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>datanucleus.schema.autoCreateAll<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>datanucleus.autoCreateTables<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>datanucleus.autoCreateColumns<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.local<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 显示表的列名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.cli.print.header<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 显示数据库名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.cli.print.current.db<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.exec.local.scratchdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/hive<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>Local scratch space for Hive jobs<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自定义目录start --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.downloaded.resources.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/hive/hive-downloaded-addDir/<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>Temporary local directory for added resources in the remote file system.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.querylog.location<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/hive/querylog-location-addDir/<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>Location of Hive run time structured log file<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.server2.logging.operation.log.location<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/hive/hive-logging-operation-log-addDir/<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>Top level directory where operation logs are stored if logging functionality is enabled<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自定义目录end --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-格式化数据库及验证"><a href="#2-4-格式化数据库及验证" class="headerlink" title="2.4 格式化数据库及验证"></a>2.4 格式化数据库及验证</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式化数据库</span></span><br><span class="line"><span class="attr">schematool</span> <span class="string">-dbType mysql -initSchema</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动hive</span></span><br><span class="line"><span class="attr">hive</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看数据库</span></span><br><span class="line"><span class="meta">hive&gt;</span> <span class="string">show databases;</span></span><br></pre></td></tr></table></figure><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a>Tips:</h1><h5 id="1-如报错显示没有数据库连接驱动则下载mysql驱动包到hive目录下的lib目录下"><a href="#1-如报错显示没有数据库连接驱动则下载mysql驱动包到hive目录下的lib目录下" class="headerlink" title="1.如报错显示没有数据库连接驱动则下载mysql驱动包到hive目录下的lib目录下"></a>1.如报错显示没有数据库连接驱动则下载mysql驱动包到hive目录下的lib目录下</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;software&#x2F;hive&#x2F;lib</span><br><span class="line">wget http:&#x2F;&#x2F;central.maven.org&#x2F;maven2&#x2F;mysql&#x2F;mysql-connector-java&#x2F;6.0.6&#x2F;mysql-connector-java-6.0.6.jar</span><br></pre></td></tr></table></figure><h5 id="2-自定义hive的连接用户名和密码"><a href="#2-自定义hive的连接用户名和密码" class="headerlink" title="2.自定义hive的连接用户名和密码"></a><a href="http://www.pianshen.com/article/1872402467/" target="_blank" rel="noopener">2.自定义hive的连接用户名和密码</a></h5>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;本文介绍的是当下正流行的大数据技术Hive的单机版安装，所用版本为3.1.2&lt;/p&gt;
    
    </summary>
    
    
      <category term="大数据" scheme="http://songhui.club/source/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="大数据" scheme="http://songhui.club/source/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="Hive" scheme="http://songhui.club/source/tags/Hive/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop安装（单机版）</title>
    <link href="http://songhui.club/%E5%A4%A7%E6%95%B0%E6%8D%AE/2020/hadoop-install.html"/>
    <id>http://songhui.club/%E5%A4%A7%E6%95%B0%E6%8D%AE/2020/hadoop-install.html</id>
    <published>2020-01-26T07:26:05.000Z</published>
    <updated>2020-01-27T03:21:51.212Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>本文介绍了当下正流行的大数据技术基础框架Hadoop的单机版安装及简单配置，选用的版本是2.9.2.</p><a id="more"></a><h1 id="1-下载安装"><a href="#1-下载安装" class="headerlink" title="1. 下载安装"></a>1. 下载安装</h1><p><a href="https://hadoop.apache.org/releases.html" target="_blank" rel="noopener">官网下载链接</a></p><h3 id="1-1-这里选择安装的是2-9-2，使用下面命令进行下载："><a href="#1-1-这里选择安装的是2-9-2，使用下面命令进行下载：" class="headerlink" title="1.1 这里选择安装的是2.9.2，使用下面命令进行下载："></a>1.1 这里选择安装的是2.9.2，使用下面命令进行下载：</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cd ~/software</span></span><br><span class="line"><span class="attr">wget</span> <span class="string">http://apache.communilink.net/hadoop/common/hadoop-2.9.2/hadoop-2.9.2.tar.gz</span></span><br></pre></td></tr></table></figure><h3 id="1-2-解压重命名"><a href="#1-2-解压重命名" class="headerlink" title="1.2 解压重命名"></a>1.2 解压重命名</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tar</span> <span class="string">-xzvf hadoop-2.9.2.tar.gz</span></span><br><span class="line"><span class="attr">mv</span> <span class="string">hadoop-2.9.2 hadoop</span></span><br></pre></td></tr></table></figure><h3 id="1-3-配置环境变量"><a href="#1-3-配置环境变量" class="headerlink" title="1.3 配置环境变量"></a>1.3 配置环境变量</h3><h5 id="使用vim编辑-bashrc文件，加入以下配置-目录换成自己的安装目录）："><a href="#使用vim编辑-bashrc文件，加入以下配置-目录换成自己的安装目录）：" class="headerlink" title="使用vim编辑~/.bashrc文件，加入以下配置(目录换成自己的安装目录）："></a>使用vim编辑~/.bashrc文件，加入以下配置(目录换成自己的安装目录）：</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">export</span> <span class="string">HADOOP_HOME=/software/hadoop</span></span><br><span class="line"><span class="attr">export</span> <span class="string">HADOOP_INSTALL=$HADOOP_HOME</span></span><br><span class="line"><span class="attr">export</span> <span class="string">HADOOP_MAPRED_HOME=$HADOOP_HOME</span></span><br><span class="line"><span class="attr">export</span> <span class="string">HADOOP_COMMON_HOME=$HADOOP_HOME</span></span><br><span class="line"><span class="attr">export</span> <span class="string">HADOOP_HDFS_HOME=$HADOOP_HOME</span></span><br><span class="line"><span class="attr">export</span> <span class="string">YARN_HOME=$HADOOP_HOME</span></span><br><span class="line"><span class="attr">export</span> <span class="string">HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native</span></span><br><span class="line"><span class="attr">export</span> <span class="string">HADOOP_OPTS="-Djava.library.path=$HADOOP_HOME/lib/native"</span></span><br><span class="line"><span class="attr">export</span> <span class="string">PATH=$PATH:$HADOOP_HOME/sbin:$HADOOP_HOME/bin</span></span><br></pre></td></tr></table></figure><h5 id="使用source命令使配置生效：-source-bashrc"><a href="#使用source命令使配置生效：-source-bashrc" class="headerlink" title="使用source命令使配置生效： source ~/.bashrc"></a>使用source命令使配置生效： source ~/.bashrc</h5><h5 id="可以使用echo-PATH-输出查看是否正确"><a href="#可以使用echo-PATH-输出查看是否正确" class="headerlink" title="可以使用echo $PATH 输出查看是否正确"></a>可以使用echo $PATH 输出查看是否正确</h5><h1 id="2-简单配置"><a href="#2-简单配置" class="headerlink" title="2. 简单配置"></a>2. 简单配置</h1><h3 id="2-1-编辑core-site-xml"><a href="#2-1-编辑core-site-xml" class="headerlink" title="2.1 编辑core-site.xml"></a>2.1 编辑core-site.xml</h3><h4 id="文件位置：-HADOOP-HOME-etc-hadoop-core-site-xml"><a href="#文件位置：-HADOOP-HOME-etc-hadoop-core-site-xml" class="headerlink" title="文件位置：$HADOOP_HOME/etc/hadoop/core-site.xml"></a>文件位置：$HADOOP_HOME/etc/hadoop/core-site.xml</h4><h4 id="命令："><a href="#命令：" class="headerlink" title="命令："></a>命令：</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cd</span> <span class="string">/software/hadoop/etc/hadoop</span></span><br><span class="line"><span class="attr">vim</span> <span class="string">core-site.xml</span></span><br></pre></td></tr></table></figure><h4 id="配置如下："><a href="#配置如下：" class="headerlink" title="配置如下："></a>配置如下：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定运行端口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定临时目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-编辑hdfs-site-xml"><a href="#2-2-编辑hdfs-site-xml" class="headerlink" title="2.2 编辑hdfs-site.xml"></a>2.2 编辑hdfs-site.xml</h3><h4 id="文件位置：-HADOOP-HOME-etc-hadoop-hdfs-site-xml"><a href="#文件位置：-HADOOP-HOME-etc-hadoop-hdfs-site-xml" class="headerlink" title="文件位置： $HADOOP_HOME/etc/hadoop/hdfs-site.xml"></a>文件位置： $HADOOP_HOME/etc/hadoop/hdfs-site.xml</h4><h4 id="命令：-1"><a href="#命令：-1" class="headerlink" title="命令："></a>命令：</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cd</span> <span class="string">/software/hadoop/etc/hadoop</span></span><br><span class="line"><span class="attr">vim</span> <span class="string">hdfs-site.xml</span></span><br></pre></td></tr></table></figure><h4 id="配置："><a href="#配置：" class="headerlink" title="配置："></a>配置：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 备份数量 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-编辑mapred-site-xml"><a href="#2-3-编辑mapred-site-xml" class="headerlink" title="2.3 编辑mapred-site.xml"></a>2.3 编辑mapred-site.xml</h3><h4 id="位置：-HADOOP-HOME-etc-hadoop-mapred-site-xml-template"><a href="#位置：-HADOOP-HOME-etc-hadoop-mapred-site-xml-template" class="headerlink" title="位置：$HADOOP_HOME/etc/hadoop/mapred-site.xml.template"></a>位置：$HADOOP_HOME/etc/hadoop/mapred-site.xml.template</h4><h4 id="命令：-2"><a href="#命令：-2" class="headerlink" title="命令："></a>命令：</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cd</span> <span class="string">/software/hadoop/etc/hadoop</span></span><br><span class="line"><span class="comment"># 复制并重命名</span></span><br><span class="line"><span class="attr">cp</span> <span class="string">mapred-site.xml.template mapred-site.xml</span></span><br><span class="line"><span class="attr">vim</span> <span class="string">mapred-site.xml</span></span><br></pre></td></tr></table></figure><h4 id="配置：-1"><a href="#配置：-1" class="headerlink" title="配置："></a>配置：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置资源管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-编辑yarn-site-xml"><a href="#2-4-编辑yarn-site-xml" class="headerlink" title="2.4 编辑yarn-site.xml"></a>2.4 编辑yarn-site.xml</h3><h4 id="位置：-HADOOP-HOME-etc-hadoop-yarn-site-xml"><a href="#位置：-HADOOP-HOME-etc-hadoop-yarn-site-xml" class="headerlink" title="位置： $HADOOP_HOME/etc/hadoop/yarn-site.xml"></a>位置： $HADOOP_HOME/etc/hadoop/yarn-site.xml</h4><h4 id="命令：-3"><a href="#命令：-3" class="headerlink" title="命令："></a>命令：</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cd</span> <span class="string">/software/hadoop/etc/hadoop</span></span><br><span class="line"><span class="attr">vim</span> <span class="string">yarn-site.xml</span></span><br></pre></td></tr></table></figure><h4 id="配置：-2"><a href="#配置：-2" class="headerlink" title="配置："></a>配置：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="3-启动Hadoop"><a href="#3-启动Hadoop" class="headerlink" title="3. 启动Hadoop"></a>3. 启动Hadoop</h1><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一次，格式化namenode</span></span><br><span class="line"><span class="attr">hdfs</span> <span class="string">namenode -format</span></span><br><span class="line"><span class="comment"># 运行HDFS</span></span><br><span class="line"><span class="attr">start-dfs.sh</span></span><br><span class="line"><span class="comment"># 运行yarn</span></span><br><span class="line"><span class="attr">start-yarn.sh</span></span><br><span class="line"><span class="comment"># 查看运行状况(前提是安装jdk并配置环境变量)</span></span><br><span class="line"><span class="attr">jps</span></span><br><span class="line"><span class="comment"># 停止hdfs</span></span><br><span class="line"><span class="attr">stop-dfs.sh</span></span><br><span class="line"><span class="comment"># 停止yarn</span></span><br><span class="line"><span class="attr">stop-yarn.sh</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;本文介绍了当下正流行的大数据技术基础框架Hadoop的单机版安装及简单配置，选用的版本是2.9.2.&lt;/p&gt;
    
    </summary>
    
    
      <category term="大数据" scheme="http://songhui.club/source/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="大数据" scheme="http://songhui.club/source/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="Hadoop" scheme="http://songhui.club/source/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC -- 必知必会</title>
    <link href="http://songhui.club/Spring/2020/SpringMVC-known.html"/>
    <id>http://songhui.club/Spring/2020/SpringMVC-known.html</id>
    <published>2020-01-18T08:10:43.000Z</published>
    <updated>2020-01-18T08:17:36.923Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>​    SpringMVC基于模型–视图–控制器（Model-View-Controller，MVC）模式实现，属于SpringFrameWork的后续产品，已经融合在SpringWebFlow里面。它通过一套注解，让一个简单的Java类成为处理请求的控制器，而无需实现任何接口。同时它还支持RESTful编程风格的请求。SpringMVC是基于方法设计的，相比基于类设计的Struts2要稍微快一些。</p><a id="more"></a><h1 id="1-使用步骤"><a href="#1-使用步骤" class="headerlink" title="1. 使用步骤"></a>1. 使用步骤</h1><h5 id="第一步：导入jar包或Maven坐标"><a href="#第一步：导入jar包或Maven坐标" class="headerlink" title="第一步：导入jar包或Maven坐标"></a>第一步：导入jar包或Maven坐标</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这里导入spring-webmvc即可，会自动导入它依赖的其他jar包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="第二步：修改并配置web-xml文件"><a href="#第二步：修改并配置web-xml文件" class="headerlink" title="第二步：修改并配置web.xml文件"></a>第二步：修改并配置web.xml文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 修改配置文件头约束为如下：（可到tomcat的web.xml中复制 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 1.配置核心控制器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispathcerServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置核心控制器的初始化参数,指定spring的配置文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:webApplicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- servlet初始化时机:服务器启动第一个加载 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 2.配置映射路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispathcerServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- / 代表默认,用其可使用spring的REST风格的url --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 3.配置编码过滤器：解决post中文乱码问题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置编码方式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="第三步：创建SpringMVC的配置文件"><a href="#第三步：创建SpringMVC的配置文件" class="headerlink" title="第三步：创建SpringMVC的配置文件"></a>第三步：创建SpringMVC的配置文件</h5><h6 id="webApplicationContext-xml"><a href="#webApplicationContext-xml" class="headerlink" title="webApplicationContext.xml"></a>webApplicationContext.xml</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.指定要扫描的包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.dintalk"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2.开启mvc的注解驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3.配置解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="第四步：编写控制器（POJO-★★★"><a href="#第四步：编写控制器（POJO-★★★" class="headerlink" title="第四步：编写控制器（POJO)   ★★★"></a>第四步：编写控制器（POJO)   ★★★</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>) <span class="comment">//适合模块化开发(不加也可以)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">   <span class="comment">//1. 根据url地址进行url映射(handlerMapping)</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我的第一个处理器执行了.."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="第五步：编写页面-★★★"><a href="#第五步：编写页面-★★★" class="headerlink" title="第五步：编写页面  ★★★"></a>第五步：编写页面  ★★★</h5><p>我们在页面中的链接如 …/user/hello便会访问到该方法</p><h1 id="2-URL映射"><a href="#2-URL映射" class="headerlink" title="2. URL映射"></a>2. URL映射</h1><p>​    url映射的规则，主要在添加@RequestMapping注解时指定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 指定单个url地址映射(handlerMapping)</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//2. 指定多个url地址映射，但需保证不能和其他方法有重复的。</span></span><br><span class="line"><span class="comment">//思考一下为什么。</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(&#123;<span class="string">"/hello2"</span>,<span class="string">"hello1"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//3. 根据请求方式进行映射</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/hello3"</span>,method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello3</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//若当前处理器添加了模块映射：如/user，那么该方法会拦截到所有以POST方式</span></span><br><span class="line"><span class="comment">//请求到该处理器（请求路径以/user结尾，即未定位到指定方法）的请求</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line"><span class="comment">//4. 根据请求参数进行映射</span></span><br><span class="line"><span class="comment">//params指定后，若不传参则会报错</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/hello5"</span>,params = &#123;<span class="string">"name"</span>,<span class="string">"password"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello5</span><span class="params">(String name,String password)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line"><span class="comment">//5. 根据请求消息头进行映射</span></span><br><span class="line"><span class="comment">//不携带cookie消息头就会报错</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/hello6"</span>,headers = &#123;<span class="string">"cookie"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello6</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line"><span class="comment">//6. 根据请求的正文mime类型进行映射</span></span><br><span class="line"><span class="comment">//只有post请求才会有正文</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/hello7"</span>,</span><br><span class="line">    method = RequestMethod.POST,consumes = <span class="string">"multipart/form-data"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello7</span><span class="params">()</span></span>&#123;</span><br></pre></td></tr></table></figure><h1 id="3-请求参数的封装"><a href="#3-请求参数的封装" class="headerlink" title="3. 请求参数的封装"></a>3. 请求参数的封装</h1><h2 id="3-1-简单类型的封装"><a href="#3-1-简单类型的封装" class="headerlink" title="3.1 简单类型的封装"></a>3.1 简单类型的封装</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理器的方法,springmvc会自动进行数据类型转换，转换失败则报错</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/param"</span>,params =&#123;<span class="string">"name"</span>,<span class="string">"age"</span>&#125; )</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">param</span><span class="params">(String name, Integer age)</span></span>&#123;</span><br><span class="line"><span class="comment">//jsp页面</span></span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/param?name=song&amp;age=21"&gt;简单参数的封装&lt;/a&gt;</span><br></pre></td></tr></table></figure><h2 id="3-2-数组的封装"><a href="#3-2-数组的封装" class="headerlink" title="3.2 数组的封装"></a>3.2 数组的封装</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理器的方法</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/param1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">param1</span><span class="params">(String[] myAr)</span></span>&#123;</span><br><span class="line"><span class="comment">//jsp页面</span></span><br><span class="line">&lt;form  action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/param1"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    arr:&lt;input name=<span class="string">"myArr"</span> value=<span class="string">"song"</span>&gt;</span><br><span class="line">    arr:&lt;input name=<span class="string">"myArr"</span> value=<span class="string">"hui"</span>&gt;</span><br><span class="line">    &lt;%-- hui1会覆盖掉hui --%&gt;</span><br><span class="line">    arr:&lt;input name=<span class="string">"myArr[1]"</span> value=<span class="string">"hui1"</span>&gt;</span><br><span class="line">    arr:&lt;input name=<span class="string">"myArr"</span> value=<span class="string">"慧"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"封装数组myArr"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"><span class="comment">//页面传参数时，后边指定角标的会将前面的覆盖掉</span></span><br></pre></td></tr></table></figure><h2 id="3-3-POJO的封装"><a href="#3-3-POJO的封装" class="headerlink" title="3.3 POJO的封装"></a>3.3 POJO的封装</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理器的方法</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/param2"</span>,params =&#123;<span class="string">"name"</span>,<span class="string">"age"</span>&#125; )</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">param2</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line"><span class="comment">//jsp页面</span></span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/param2?name=song&amp;age=21"&gt;POJO的封装&lt;/a&gt;</span><br></pre></td></tr></table></figure><h2 id="3-4-封装POJO关联的POJO"><a href="#3-4-封装POJO关联的POJO" class="headerlink" title="3.4 封装POJO关联的POJO"></a>3.4 封装POJO关联的POJO</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理器的方法</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/param3"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">param3</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line"><span class="comment">//jsp页面</span></span><br><span class="line">&lt;form  action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/param3"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    name:&lt;input name=<span class="string">"name"</span> value=<span class="string">"song"</span>/&gt;</span><br><span class="line">    name:&lt;input name=<span class="string">"password"</span> value=<span class="string">"hui"</span>/&gt;</span><br><span class="line">    address:&lt;input name=<span class="string">"address.province"</span> value=<span class="string">"bj"</span>&gt;</span><br><span class="line">    address:&lt;input name=<span class="string">"address.city"</span> value=<span class="string">"zjk"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"封装pojo关联的pojo"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"><span class="comment">//封装user中关联的address</span></span><br></pre></td></tr></table></figure><h2 id="3-5-封装POJO关联的数组"><a href="#3-5-封装POJO关联的数组" class="headerlink" title="3.5 封装POJO关联的数组"></a>3.5 封装POJO关联的数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理器的方法 </span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/param4"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">param4</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line"><span class="comment">//jsp页面</span></span><br><span class="line">&lt;form  action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/param4"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    name:&lt;input name=<span class="string">"name"</span> value=<span class="string">"song"</span>/&gt;</span><br><span class="line">    arr:&lt;input name=<span class="string">"myArr"</span> value=<span class="string">"s"</span>&gt;</span><br><span class="line">    arr:&lt;input name=<span class="string">"myArr"</span> value=<span class="string">"hui"</span>&gt;</span><br><span class="line">    &lt;%-- hui1会覆盖掉hui --%&gt;</span><br><span class="line">    arr:&lt;input name=<span class="string">"myArr[1]"</span> value=<span class="string">"hui1"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"封装pojo关联的arr"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"><span class="comment">//页面传参数时，后边指定角标的会将前面的覆盖掉</span></span><br></pre></td></tr></table></figure><h2 id="3-6-封装POJO关联的List"><a href="#3-6-封装POJO关联的List" class="headerlink" title="3.6 封装POJO关联的List"></a>3.6 封装POJO关联的List</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理器的方法</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/param5"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">param5</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line"><span class="comment">//jsp页面</span></span><br><span class="line">&lt;form  action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/param5"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    name:&lt;input name=<span class="string">"name"</span> value=<span class="string">"song"</span>/&gt;</span><br><span class="line">    list:&lt;input name=<span class="string">"myList"</span> value=<span class="string">"1"</span>&gt;</span><br><span class="line">    list:&lt;input name=<span class="string">"myList"</span> value=<span class="string">"hui"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"封装pojo关联的list"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h2 id="3-7-封装POJO关联的Map"><a href="#3-7-封装POJO关联的Map" class="headerlink" title="3.7 封装POJO关联的Map"></a>3.7 封装POJO关联的Map</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理器的方法</span></span><br><span class="line"> <span class="meta">@RequestMapping</span>(path = <span class="string">"/param6"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">param6</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line"><span class="comment">//jsp页面</span></span><br><span class="line">&lt;form  action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/param6"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    name:&lt;input name=<span class="string">"name"</span> value=<span class="string">"song"</span>/&gt;</span><br><span class="line">    map:&lt;input name=<span class="string">"myMap['s']"</span> value=<span class="string">"song"</span>&gt;</span><br><span class="line">    map:&lt;input name=<span class="string">"myMap[s1]"</span> value=<span class="string">"hui"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"封装pojo关联的map"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"><span class="comment">//页面传参数指定map的key可用单引号也可不用</span></span><br></pre></td></tr></table></figure><h1 id="4-请求的转发和重定向"><a href="#4-请求的转发和重定向" class="headerlink" title="4. 请求的转发和重定向"></a>4. 请求的转发和重定向</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//请求转发</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"我的第一个处理器执行了.."</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello"</span>;  <span class="comment">// 服务器默认用的是请求转发</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"我的第一个处理器执行了.."</span>);</span><br><span class="line">    <span class="comment">// 自己转发的话，必须用实际视图地址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"forward:/WEB-INF/pages/hello.jsp"</span>;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//请求重定向</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"我的第一个处理器执行了.."</span>);</span><br><span class="line">    <span class="comment">// 重定向</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:http://www.baidu.com"</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-SpringMVC下静态资源的访问"><a href="#5-SpringMVC下静态资源的访问" class="headerlink" title="5. SpringMVC下静态资源的访问"></a>5. SpringMVC下静态资源的访问</h1><p>​    我们在Spring MVC框架中为了是URL更符合RESTful风格，通常在web.xml中会配置Spring框架servlet 的 url 拦截为  “/“  ,也就是拦截所有资源的url请求，这样一来，所有的资源包括， js  | css |  图片  |  所有静态资源都将经过框架的servlet拦截 。而又没有对应的处理器，因此会找不到资源（404）。因此我们要对静态资源放行：</p><h5 id="第一种方法：激活web应用服务器（如Tomcat）的defaultServlet来处理静态文件"><a href="#第一种方法：激活web应用服务器（如Tomcat）的defaultServlet来处理静态文件" class="headerlink" title="第一种方法：激活web应用服务器（如Tomcat）的defaultServlet来处理静态文件"></a>第一种方法：激活web应用服务器（如Tomcat）的defaultServlet来处理静态文件</h5><h6 id="web-xml中加入以下配置"><a href="#web-xml中加入以下配置" class="headerlink" title="web.xml中加入以下配置"></a>web.xml中加入以下配置</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jpg<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.js<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.css<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Tips:</strong> 要配置多个，每种文件配置一个,要写在DispatcherServlet的前面,让defaultServlet先拦截，这样就不会进入Spring了，可能性能是最好的。</p><h5 id="第二种方法：使用Spring3-0-4以后版本提供的-lt-mvc-resources-gt"><a href="#第二种方法：使用Spring3-0-4以后版本提供的-lt-mvc-resources-gt" class="headerlink" title="第二种方法：使用Spring3.0.4以后版本提供的  &lt;mvc:resources /&gt;"></a>第二种方法：使用Spring3.0.4以后版本提供的  &lt;mvc:resources /&gt;</h5><h6 id="webApplicationContext-xml中加入以下配置"><a href="#webApplicationContext-xml中加入以下配置" class="headerlink" title="webApplicationContext.xml中加入以下配置"></a>webApplicationContext.xml中加入以下配置</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/static/**"</span> <span class="attr">location</span>=<span class="string">"/static/"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 不加下面这句话可能会报错 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Tips:</strong> location的值要配到最后一个/ ,如果这里只写到 /static 还是放行不了的。</p><h5 id="第三种方法：使用-lt-mvc-default-servlet-handler-gt"><a href="#第三种方法：使用-lt-mvc-default-servlet-handler-gt" class="headerlink" title="第三种方法：使用 &lt;mvc:default-servlet-handler/ &gt;"></a>第三种方法：使用 &lt;mvc:default-servlet-handler/ &gt;</h5><h6 id="webApplicationContext-xml中加入以下配置-1"><a href="#webApplicationContext-xml中加入以下配置-1" class="headerlink" title="webApplicationContext.xml中加入以下配置"></a>webApplicationContext.xml中加入以下配置</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;mvc:<span class="keyword">default</span>-servlet-handler <span class="keyword">default</span>-servlet-name=<span class="string">"default"</span>/&gt;</span><br></pre></td></tr></table></figure><h5 id="Tips：如果用后两种方法的话-加载一个静态资源是却要经过框架servlet的层层pattern，会有不必要的性能开销。-但对于一些比较重要的静态文件，我们可以将其放在WEB-INF目录下保护起来（该目录下不可直接访问-，但我们可以在服务端应用-请求转发-。"><a href="#Tips：如果用后两种方法的话-加载一个静态资源是却要经过框架servlet的层层pattern，会有不必要的性能开销。-但对于一些比较重要的静态文件，我们可以将其放在WEB-INF目录下保护起来（该目录下不可直接访问-，但我们可以在服务端应用-请求转发-。" class="headerlink" title="Tips：如果用后两种方法的话 加载一个静态资源是却要经过框架servlet的层层pattern，会有不必要的性能开销。 但对于一些比较重要的静态文件，我们可以将其放在WEB-INF目录下保护起来（该目录下不可直接访问 )，但我们可以在服务端应用(请求转发)。"></a><strong>Tips：如果用后两种方法的话</strong> 加载一个静态资源是却要经过框架servlet的层层pattern，会有不必要的性能开销。 但对于一些比较重要的静态文件，我们可以将其放在WEB-INF目录下保护起来（该目录下不可直接访问 )，但我们可以在服务端应用(请求转发)。</h5><h1 id="6-常用注解、异步交互和Restful风格的url"><a href="#6-常用注解、异步交互和Restful风格的url" class="headerlink" title="6. 常用注解、异步交互和Restful风格的url"></a>6. 常用注解、异步交互和Restful风格的url</h1><h2 id="6-1-常用注解"><a href="#6-1-常用注解" class="headerlink" title="6.1 常用注解"></a>6.1 常用注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. @RequestParam:可处理请求参数名和处理器方法参数名不一致的情况</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"demo1"</span>)</span><br><span class="line"><span class="comment">//RequestParam默认required=true,指必须提供,否则报错!将username参数赋值给name</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo1</span><span class="params">(@RequestParam(value = <span class="string">"username"</span>,required = <span class="keyword">false</span>)</span>String name)</span>&#123;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//2. @RequestHeader:用指定消息头为处理器参数赋值</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"demo2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo2</span><span class="params">(@RequestHeader(<span class="string">"accept-encoding"</span>)</span>String encode)</span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//3. @CookieValue:获取cookie的值给处理器参数赋值</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"demo3"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo3</span><span class="params">(@CookieValue(<span class="string">"JSESSIONID"</span>)</span>String JsessionId)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. @RequestBody:获取请求消息正文,注意只有post请求才有正文</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"demo4"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo4</span><span class="params">(@RequestBody String Content)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5. @ModelAttribute:用在参数上，获取指定数据给参数赋值（无对应数据会报错）</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"demo5"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo5</span><span class="params">(@ModelAttribute(<span class="string">"user1"</span>)</span> User user1)</span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//6. @ModelAttribute:用在方法上，会在控制器任意方法执行前执行</span></span><br><span class="line"><span class="comment">//会把方法的返回值以指定名称存到域对象中。无返回值可通过隐式对象存数据</span></span><br><span class="line"><span class="meta">@ModelAttribute</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">createUser</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//7. @SessionAttributes:用在类定义上,将存放在model中对应的数据暂存到HttpSession 中。</span></span><br><span class="line">    <span class="comment">//会将model中所有类型为 User的属性添加到会话中。</span></span><br><span class="line"><span class="meta">@SessionAttributes</span>(types=User<span class="class">.<span class="keyword">class</span>)  </span></span><br><span class="line"><span class="class">    //会将<span class="title">model</span>中属性名为<span class="title">user1</span>和<span class="title">user2</span>的属性添加到会话中。</span></span><br><span class="line"><span class="class">@<span class="title">SessionAttributes</span>(<span class="title">value</span></span>=&#123;“user1”, “user2”&#125;) </span><br><span class="line">    <span class="comment">//会将model中所有类型为 User和Dept的属性添加到会话中。</span></span><br><span class="line"><span class="meta">@SessionAttributes</span>(types=&#123;User<span class="class">.<span class="keyword">class</span>, <span class="title">Address</span>.<span class="title">class</span>&#125;) </span></span><br><span class="line"><span class="class">    //会将<span class="title">model</span>中属性名为<span class="title">user1</span>和<span class="title">user2</span>以及类型为<span class="title">Dept</span>的属性添加到会话中。</span></span><br><span class="line"><span class="class">@<span class="title">SessionAttributes</span>(<span class="title">value</span></span>=&#123;“user1”,“user2”&#125;,types=&#123;Address<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">//需要注意的是,<span class="title">value</span>和<span class="title">types</span>之间是取并集的关系</span></span><br><span class="line"><span class="class"></span></span><br><span class="line">//8. @ResponseBody:将方法返回的对象，通过 HttpMessageConverter接口转换为指定格式的</span><br><span class="line"><span class="comment">//数据如：json,xml 等，通过 Response 响应给客户端</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demo8"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span>  <span class="comment">// 也可加到返回值前面，即User前面：public @ResponseBody User ...</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">demo8</span><span class="params">()</span></span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//9. @PathVariable:绑定url中占位符如请求url中/delete/&#123;id&#125;，这个&#123;id&#125;就是url占位符。</span></span><br><span class="line">    <span class="comment">//将其赋给处理器参数，结合method=...,可实现rest风格的url</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/user/&#123;id&#125;"</span>,method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">find</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer uid)</span>&#123;</span><br></pre></td></tr></table></figure><p><strong>Tips:</strong>    @ModelAttribute用在参数上是从请求域中获取指定数据赋给参数，用在方法上是每一次访问该处理器的任意方法前都会执行该方法。可将所修饰的方法返回值以指定名称存入请求域中。</p><h2 id="6-2-异步交互"><a href="#6-2-异步交互" class="headerlink" title="6.2 异步交互"></a>6.2 异步交互</h2><p>​    使用SpringMVC如何完成ajax的异步交互呢？很简单，我们主要使用它的两个注解来实现:</p><h5 id="导入jackson的jar包或Maven坐标"><a href="#导入jackson的jar包或Maven坐标" class="headerlink" title="导入jackson的jar包或Maven坐标"></a>导入jackson的jar包或Maven坐标</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 该包依赖的其他包会自动导入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-1-RequestBody接受异步请求"><a href="#2-1-RequestBody接受异步请求" class="headerlink" title="2.1@RequestBody接受异步请求"></a>2.1@RequestBody接受异步请求</h5><h6 id="处理器方法"><a href="#处理器方法" class="headerlink" title="处理器方法"></a>处理器方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demo1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo1</span><span class="params">(@RequestBody String content)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    <span class="comment">//使用jackson解析json数据封装到pojo中</span></span><br><span class="line">    User user = objectMapper.readValue(content, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    System.out.println(<span class="string">"异步请求到了"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="异步请求页面"><a href="#异步请求页面" class="headerlink" title="异步请求页面"></a>异步请求页面</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   $(<span class="string">"#b1"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       $.ajax(&#123;</span><br><span class="line">           type: <span class="string">"POST"</span>,</span><br><span class="line">           url: <span class="string">"$&#123;pageContext.request.contextPath&#125;/json/demo1"</span>,</span><br><span class="line">           dataType: <span class="string">"json"</span>,</span><br><span class="line">           contentType: <span class="string">"application/json"</span>,</span><br><span class="line">           data: <span class="string">'&#123;"name":"song","password":"hui"&#125;'</span></span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>Tips</strong>: 如果不加入contentType:”application/json”会解析失败，因为加入它才会发送json格式的数据。</p><h5 id="2-2-ResponseBody返回Json数据"><a href="#2-2-ResponseBody返回Json数据" class="headerlink" title="2.2@ResponseBody返回Json数据"></a>2.2@ResponseBody返回Json数据</h5><h6 id="处理器方法-1"><a href="#处理器方法-1" class="headerlink" title="处理器方法"></a>处理器方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demo2"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">demo2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="string">"da"</span>);</span><br><span class="line">    user.setUid(<span class="number">22</span>);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="异步请求页面-1"><a href="#异步请求页面-1" class="headerlink" title="异步请求页面"></a>异步请求页面</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"#b2"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: <span class="string">"POST"</span>,</span><br><span class="line">            url: <span class="string">"$&#123;pageContext.request.contextPath&#125;/json/demo2"</span>,</span><br><span class="line">            data: <span class="string">'&#123;"name":"song","password":"hui"&#125;'</span>,</span><br><span class="line">            dataType: <span class="string">"json"</span>,</span><br><span class="line">            contentType: <span class="string">"application/json"</span>,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                alert(data.uid);</span><br><span class="line">                alert(data.name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="6-3-Restful风格的url"><a href="#6-3-Restful风格的url" class="headerlink" title="6.3 .Restful风格的url"></a>6.3 .Restful风格的url</h2><h3 id="6-3-1-restful的状态转化特性"><a href="#6-3-1-restful的状态转化特性" class="headerlink" title="6.3.1 restful的状态转化特性"></a>6.3.1 restful的状态转化特性</h3><p>​    HTTP 协议，是一个无状态协议，即所有的状态都保存在服务器端。因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发生 “状态转化 ”（ State Transfer）。而这种转化是建立在表现层之上的，所以就是  “表现层状态转化 ”。具体说，就是  HTTP 协议里面，四个表示操作方式的动词： GET、 POST、 PUT、DELETE。它们分别对应四种基本操作： GET 用来获取资源， POST 用来新建资源， PUT 用来更新资源， DELETE 用来删除资源。</p><p><strong>restful  的示例：</strong><br>/account/1 HTTP  GET     ：       得到 id = 1 的 account<br>/account/1 HTTP  DELETE    ：     删除 id = 1 的 account<br>/account/1 HTTP  PUT        ：      更新 id = 1 的 account<br>/account HTTP  POST        ：       新增 account</p><h3 id="6-3-2-基于HiddenHttpMethodFilter使用-PathVariable注解构建rest风格的url"><a href="#6-3-2-基于HiddenHttpMethodFilter使用-PathVariable注解构建rest风格的url" class="headerlink" title="6.3.2 基于HiddenHttpMethodFilter使用@PathVariable注解构建rest风格的url"></a>6.3.2 基于HiddenHttpMethodFilter使用@PathVariable注解构建rest风格的url</h3><p>​    由于浏览器 form 表单只支持 GET 与 POST 请求，而 DELETE、PUT 等 method 并不支持，Spring3.0 添加了一个过滤器，可以将浏览器请求改为指定的请求方式，发送给我们的控制器方法，使得支持 GET、POST、PUT与 DELETE 请求。</p><h6 id="第一步：web-xml中配置过滤器"><a href="#第一步：web-xml中配置过滤器" class="headerlink" title="第一步：web.xml中配置过滤器"></a>第一步：web.xml中配置过滤器</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置过滤器将表单不支持的请求方式转化(支持restful风格) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="第二步：表单书写"><a href="#第二步：表单书写" class="headerlink" title="第二步：表单书写"></a>第二步：表单书写</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 对于不支持的请求方式,get，post之外的：form表单的method要指定为post</span></span><br><span class="line"><span class="comment">并且要添加隐藏域。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"$&#123;pageContext.request.contextPath&#125;/user"</span>&gt;</span></span><br><span class="line">    username:<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"admin"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"$&#123;pageContext.request.contextPath&#125;/user/1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"PUT"</span>&gt;</span></span><br><span class="line">    username:<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"admin1"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"修改"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"get"</span> <span class="attr">action</span>=<span class="string">"$&#123;pageContext.request.contextPath&#125;/user/1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"查询"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"$&#123;pageContext.request.contextPath&#125;/user/1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"DELETE"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"删除"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="第三步：处理器方法"><a href="#第三步：处理器方法" class="headerlink" title="第三步：处理器方法"></a>第三步：处理器方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/user"</span>,method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">regist</span><span class="params">(User user)</span></span>&#123;<span class="keyword">return</span> <span class="string">"success"</span>;&#125;</span><br><span class="line"><span class="comment">//&#123;id&#125;参数的占位符</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/user/&#123;id&#125;"</span>,method = RequestMethod.PUT)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">edit</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer uid, User user)</span>&#123;<span class="keyword">return</span> <span class="string">"success"</span>;&#125;</span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/user/&#123;id&#125;"</span>,method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">find</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer uid)</span>&#123;<span class="keyword">return</span> <span class="string">"success"</span>;&#125;</span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/user1&#123;id&#125;"</span>,method = RequestMethod.DELETE)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer uid)</span>&#123;<span class="keyword">return</span> <span class="string">"success"</span>;&#125;</span><br></pre></td></tr></table></figure><h1 id="7-原始servletAPI、隐式对象和处理器返回值"><a href="#7-原始servletAPI、隐式对象和处理器返回值" class="headerlink" title="7. 原始servletAPI、隐式对象和处理器返回值"></a>7. 原始servletAPI、隐式对象和处理器返回值</h1><h2 id="7-1-原始servletAPI"><a href="#7-1-原始servletAPI" class="headerlink" title="7.1 原始servletAPI"></a>7.1 原始servletAPI</h2><p>​    要使用原始的servletAPI，我们在处理器方法中直接定义参数即可，框架会为我们传入对象。</p><h5 id="第一步：导入servlet的jar包或Maven坐标"><a href="#第一步：导入servlet的jar包或Maven坐标" class="headerlink" title="第一步：导入servlet的jar包或Maven坐标"></a>第一步：导入servlet的jar包或Maven坐标</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="第二步：处理器方法定义参数"><a href="#第二步：处理器方法定义参数" class="headerlink" title="第二步：处理器方法定义参数"></a>第二步：处理器方法定义参数</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demo1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo1</span><span class="params">(HttpServletRequest req, HttpServletResponse res)</span></span>&#123;</span><br><span class="line">    System.out.println(req+<span class="string">"==="</span>+res);</span><br></pre></td></tr></table></figure><h2 id="7-2-隐式对象"><a href="#7-2-隐式对象" class="headerlink" title="7.2 隐式对象"></a>7.2 隐式对象</h2><p>​    SpringMVC为我们提供好了默认的隐式对象，我们直接使用即可。使用Model,ModelMap和Map可以封装数据到模型对象中（request域级别）。同使用servletAPI一样，我们在处理器方法上定义参数即可使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Model对象</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demo2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo2</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line"> User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="string">"user2"</span>);</span><br><span class="line">    model.addAttribute(<span class="string">"user"</span>,user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ModelMap对象    </span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demo3"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo3</span><span class="params">(ModelMap model)</span></span>&#123;</span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="string">"user3"</span>);</span><br><span class="line">    model.addAttribute(<span class="string">"user"</span>,user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;   </span><br><span class="line"><span class="comment">//Map对象</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demo4"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo4</span><span class="params">(Map model)</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="string">"user4"</span>);</span><br><span class="line">    model.put(<span class="string">"user"</span>,user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Tips:</strong> 当然，我们也可以在处理器方法内部直接通过new创建其对象来使用。</p><h2 id="7-3-处理器返回值"><a href="#7-3-处理器返回值" class="headerlink" title="7.3 处理器返回值"></a>7.3 处理器返回值</h2><p>​    controller方法的返回值有三种：String、void、ModelAndView。</p><h3 id="7-3-1-String"><a href="#7-3-1-String" class="headerlink" title="7.3.1 String"></a>7.3.1 String</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回字符串指定逻辑视图名称，通过视图解析器解析为</span></span><br><span class="line"><span class="comment">// 真实视图地址。</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demo1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-2-void"><a href="#7-3-2-void" class="headerlink" title="7.3.2 void"></a>7.3.2 void</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法无返回值，我们可以用servletAPI完成转发、重定向、响应。</span></span><br><span class="line"><span class="comment">// 转发</span></span><br><span class="line">request.getRequestDispatcher(<span class="string">"1.jsp"</span>).forward(request,response);</span><br><span class="line"><span class="comment">//重定向:这里重定向到了当前处理器的demo1方法</span></span><br><span class="line">response.sendRedirect(<span class="string">"demo1"</span>)</span><br><span class="line"><span class="comment">//直接响应：如json数据</span></span><br><span class="line">response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">response.getWriter().write(<span class="string">"我是json串"</span>);</span><br></pre></td></tr></table></figure><h3 id="7-3-3-ModelAndView"><a href="#7-3-3-ModelAndView" class="headerlink" title="7.3.3 ModelAndView"></a>7.3.3 ModelAndView</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@RequestMapping</span>(<span class="string">"/demo3"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">demo3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="string">"haha"</span>);</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    modelAndView.setViewName(<span class="string">"success"</span>);<span class="comment">//指定视图</span></span><br><span class="line">    modelAndView.addObject(<span class="string">"user"</span>,user);<span class="comment">//存放数据</span></span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-自定义类型转化器、拦截器和异常"><a href="#8-自定义类型转化器、拦截器和异常" class="headerlink" title="8. 自定义类型转化器、拦截器和异常"></a>8. 自定义类型转化器、拦截器和异常</h1><h2 id="8-1-自定义类型转换器"><a href="#8-1-自定义类型转换器" class="headerlink" title="8.1 自定义类型转换器"></a>8.1 自定义类型转换器</h2><p>​    SpringMVC内置简单类型转换器，所以我们在进行参数封装时SpringMVC会根据类型为我们进行自动转换。开发中，我们可根据需求自定义类型转化器，通过配置加入到SpringMVC的转换器列表中即可。比如我们常常需要将用户输入的日期字符串转换成日期类型的，即String –&gt;java.util.Date的转换。</p><h5 id="第一步：自定义类实现Converter-lt-S-T-gt-接口"><a href="#第一步：自定义类实现Converter-lt-S-T-gt-接口" class="headerlink" title="第一步：自定义类实现Converter&lt;S, T&gt;接口"></a>第一步：自定义类实现Converter&lt;S, T&gt;接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义类实现了org.springframework.core.convert.converter.Converter 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateLocalConvertor</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String pattern = <span class="string">"yyyy-MM-dd"</span>;</span><br><span class="line"><span class="comment">//定义默认日期格式，并提供set方法使其可在配置文件中配置</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPattern</span><span class="params">(String pattern)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pattern = pattern;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//实现接口的转换方法：Source --&gt;Target</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(s)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(pattern);</span><br><span class="line">                Date date = simpleDateFormat.parse(s);</span><br><span class="line">                <span class="keyword">return</span> date;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"您输入的日期格式必须符合"</span>+pattern+<span class="string">"格式"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="第二步：注册自定义类型转换器到SpringMVC中"><a href="#第二步：注册自定义类型转换器到SpringMVC中" class="headerlink" title="第二步：注册自定义类型转换器到SpringMVC中"></a>第二步：注册自定义类型转换器到SpringMVC中</h5><h6 id="webApplicationContext-xml-1"><a href="#webApplicationContext-xml-1" class="headerlink" title="webApplicationContext.xml"></a>webApplicationContext.xml</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置类型转换器工厂 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"converterService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.</span></span></span><br><span class="line"><span class="tag"><span class="string">                                   ConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.相当于调用了set方法,给工厂注入新的类型转换器  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 若将来有多个自定义的类型转化器,可以用array标签包裹多个bean --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"cn.dintalk.convertor.DateLocalConvertor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引用自定义类型转化器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"converterService"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h5 id="第三步：使用"><a href="#第三步：使用" class="headerlink" title="第三步：使用"></a>第三步：使用</h5><p>​    如此，我们在前端页面输入日期字符串后，处理器方法在进行封装时会用到我们自定义的类型转换器。否则没有日期类型转换器的话，而又有日期类型的数据封装的话会报400错误。</p><h2 id="8-2-自定义拦截器"><a href="#8-2-自定义拦截器" class="headerlink" title="8.2 自定义拦截器"></a>8.2 自定义拦截器</h2><p>​    SpringMVC的处理器拦截器类似于Servlet中的过滤器Filter，用于对处理器进行预处理和后处理。但又有区别：</p><ul><li>过滤器：是servlet中的规范，任何java web工程都可使用。</li><li>拦截器：是SpringMVC框架的，使用了SpringMVC的工程才能用。</li><li>过滤器：配置了url-pattern为 /*后，可拦截所有的资源访问。</li><li>拦截器：只拦截访问的控制器的方法，不拦截jsp、html、img等。</li></ul><p>我们要自定义拦截器，就必须实现接口：HandlerInterceptor。</p><h5 id="第一步：编写普通类实现HandlerInterceptor接口"><a href="#第一步：编写普通类实现HandlerInterceptor接口" class="headerlink" title="第一步：编写普通类实现HandlerInterceptor接口"></a>第一步：编写普通类实现HandlerInterceptor接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"到达处理器前的方法执行了"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// 返回true这放行,否则拦截</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"处理器方法执行之后执行的方法执行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"页面完成响应之前的方法执行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="第二步：在webApplicationContext-xml中配置拦截器"><a href="#第二步：在webApplicationContext-xml中配置拦截器" class="headerlink" title="第二步：在webApplicationContext.xml中配置拦截器"></a>第二步：在webApplicationContext.xml中配置拦截器</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置拦截器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 拦截/inter开头的访问路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/inter/**"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"cn.dintalk.web.interceptor.MyInterceptor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 拦截/user开头的访问路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/user/**"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 排除/user/login的访问路径(不进行拦截) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/user/login"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"cn.dintalk.web.interceptor.CheckUserInterceptor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Tips:</strong> 自定义拦截器一般实现第一个方法,即在请求到达处理器前进行拦截作相应处理以决定是否放行;多个处理器的执行顺序按照其配置的上下顺序。</p><h2 id="8-3-自定义异常"><a href="#8-3-自定义异常" class="headerlink" title="8.3 自定义异常"></a>8.3 自定义异常</h2><h3 id="8-3-1-异常处理思路"><a href="#8-3-1-异常处理思路" class="headerlink" title="8.3.1 异常处理思路"></a>8.3.1 异常处理思路</h3><p>​    系统中异常包括两类：预期异常和运行时异常 RuntimeException，前者通过捕获异常从而获取异常信息，后者主要通过规范代码开发、测试通过手段减少运行时异常的发生。系统的 dao、service、controller 出现都通过 throws Exception 向上抛出，最后由 Springmvc 前端控制器交由异常处理器进行异常处理。</p><h3 id="8-3-2-编写自定义异常类和错误页面"><a href="#8-3-2-编写自定义异常类和错误页面" class="headerlink" title="8.3.2 编写自定义异常类和错误页面"></a>8.3.2 编写自定义异常类和错误页面</h3><h6 id="自定义异常继承Exception-生成构造方法即可"><a href="#自定义异常继承Exception-生成构造方法即可" class="headerlink" title="自定义异常继承Exception,生成构造方法即可"></a>自定义异常继承Exception,生成构造方法即可</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomException</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomException</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomException</span><span class="params">(String message, Throwable cause, <span class="keyword">boolean</span> enableSuppression, <span class="keyword">boolean</span> writableStackTrace)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="编写错误页面error-jsp用以展示提示信息。"><a href="#编写错误页面error-jsp用以展示提示信息。" class="headerlink" title="编写错误页面error.jsp用以展示提示信息。"></a>编写错误页面error.jsp用以展示提示信息。</h6><h3 id="8-3-3-自定义异常处理器"><a href="#8-3-3-自定义异常处理器" class="headerlink" title="8.3.3 自定义异常处理器"></a>8.3.3 自定义异常处理器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编写普通类实现org.springframework.web.servlet.HandlerExceptionResolver接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest httpServletRequest,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     HttpServletResponse httpServletResponse,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     Object o, Exception e)</span> </span>&#123;</span><br><span class="line">    CustomException exception = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (e <span class="keyword">instanceof</span> CustomException)&#123;<span class="comment">//若是自定义异常则转换</span></span><br><span class="line">        exception = (CustomException)e;<span class="comment">//使用时就封装好了消息</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;<span class="comment">//其他的异常,用自定义异常提示系统繁忙</span></span><br><span class="line">        exception = <span class="keyword">new</span> CustomException(<span class="string">"系统繁忙"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    modelAndView.setViewName(<span class="string">"error"</span>);</span><br><span class="line">    modelAndView.addObject(<span class="string">"msg"</span>,exception.getMessage());</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-3-4-配置异常处理器"><a href="#8-3-4-配置异常处理器" class="headerlink" title="8.3.4 配置异常处理器"></a>8.3.4 配置异常处理器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置异常处理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customExceptionResolver"</span> <span class="attr">class</span>=<span class="string">"cn.dintalk.web.resolver.CustomExceptionResolver"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>如此,当程序发生异常的时候,我们就可以截获异常,给用户一个友好的提示。</p><h1 id="9-文件的上传"><a href="#9-文件的上传" class="headerlink" title="9. 文件的上传"></a>9. 文件的上传</h1><p>​    要实现上传文件，对form表单有一定的要求：</p><ul><li>method必须是：post</li><li>表单的enctype：必须是 “multipart/form-data”</li><li>表单中提供type=”file”的上传输入域</li></ul><p><strong>Tips:</strong> 表单的enctype默认值为：application/x-www-form-urlencoded。修改为”multipart/form-data”后request.getParameter()等方法便获取不到数据了。</p><h2 id="9-1-准备上传页面"><a href="#9-1-准备上传页面" class="headerlink" title="9.1 准备上传页面"></a>9.1 准备上传页面</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>上传练习<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">method</span>=<span class="string">"post"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">action</span>=<span class="string">"$&#123;pageContext.request.contextPath&#125;/upload/demo1"</span>&gt;</span></span><br><span class="line">    name:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"宋hui"</span>&gt;</span></span><br><span class="line">    file:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"photo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"上传"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-2-使用Commons-fileupload组件实现上传"><a href="#9-2-使用Commons-fileupload组件实现上传" class="headerlink" title="9.2 使用Commons-fileupload组件实现上传"></a>9.2 使用Commons-fileupload组件实现上传</h2><h5 id="第一步：导入jar包或Maven坐标-1"><a href="#第一步：导入jar包或Maven坐标-1" class="headerlink" title="第一步：导入jar包或Maven坐标"></a>第一步：导入jar包或Maven坐标</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这里会自动导入其所依赖的commos-io包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="第二步：编写上传控制器"><a href="#第二步：编写上传控制器" class="headerlink" title="第二步：编写上传控制器"></a>第二步：编写上传控制器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/upload"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/demo1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo1</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建文件保存目录</span></span><br><span class="line">        String rootDir = request.getServletContext().getRealPath(<span class="string">"files"</span>);</span><br><span class="line">        String chiledDir = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>).format(<span class="keyword">new</span> Date());</span><br><span class="line">        File dir = <span class="keyword">new</span> File(rootDir, chiledDir);</span><br><span class="line">        <span class="keyword">if</span> (!dir.exists())</span><br><span class="line">            dir.mkdirs();</span><br><span class="line">        <span class="comment">//2.创建文件解析工厂</span></span><br><span class="line">        DiskFileItemFactory diskFileItemFactory = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line">        <span class="comment">//3.获取解析器</span></span><br><span class="line">        ServletFileUpload upload = <span class="keyword">new</span> ServletFileUpload(diskFileItemFactory);</span><br><span class="line">        List&lt;FileItem&gt; fileItems = upload.parseRequest(request);</span><br><span class="line">        <span class="keyword">for</span> (FileItem fileItem : fileItems) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fileItem.isFormField()) &#123;<span class="comment">//是普通字段</span></span><br><span class="line">                System.out.println(fileItem.getFieldName());<span class="comment">//字段的name</span></span><br><span class="line">                System.out.println(fileItem.getString(<span class="string">"utf-8"</span>));<span class="comment">//字段值</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 上传的文件</span></span><br><span class="line">                String fileName = fileItem.getName();<span class="comment">//获取文件名</span></span><br><span class="line">                String exName = fileName.substring(fileName.lastIndexOf(<span class="string">"."</span>));<span class="comment">//截取扩展名</span></span><br><span class="line">                String uuidName = UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>) + exName;</span><br><span class="line">                System.out.println(uuidName);</span><br><span class="line">                File target = <span class="keyword">new</span> File(dir, uuidName);</span><br><span class="line">                fileItem.write(target); <span class="comment">//写入文件</span></span><br><span class="line">                fileItem.delete();<span class="comment">//清除临时目录中的缓存</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-3-使用SpringMVC提供的组件上传"><a href="#9-3-使用SpringMVC提供的组件上传" class="headerlink" title="9.3 使用SpringMVC提供的组件上传"></a>9.3 使用SpringMVC提供的组件上传</h2><p>​    底层使用的还是apache的commons-fileupload组件。</p><h5 id="第一步：导入jar包或Maven坐标-2"><a href="#第一步：导入jar包或Maven坐标-2" class="headerlink" title="第一步：导入jar包或Maven坐标"></a>第一步：导入jar包或Maven坐标</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这里会自动导入其所依赖的commos-io包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="第二步：编写上传控制器-1"><a href="#第二步：编写上传控制器-1" class="headerlink" title="第二步：编写上传控制器"></a>第二步：编写上传控制器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/upload"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/demo2"</span>)</span><br><span class="line">    <span class="comment">//参数名称需和表单的输入域名称保持一致</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo2</span><span class="params">(HttpServletRequest request, String username, MultipartFile photo)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建目录</span></span><br><span class="line">        String rootDir = request.getServletContext().getRealPath(<span class="string">"files"</span>);</span><br><span class="line">        String chiledDir = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>).format(<span class="keyword">new</span> Date());</span><br><span class="line">        File dir = <span class="keyword">new</span> File(rootDir, chiledDir);</span><br><span class="line">        <span class="keyword">if</span> (!dir.exists())</span><br><span class="line">            dir.mkdirs();</span><br><span class="line">        <span class="comment">//2.读取数据进行保存</span></span><br><span class="line">        String fileName = photo.getOriginalFilename();<span class="comment">//获取文件名</span></span><br><span class="line">        String exName = fileName.substring(fileName.lastIndexOf(<span class="string">"."</span>));<span class="comment">//截取扩展名</span></span><br><span class="line">        String uuidName = UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>) + exName;</span><br><span class="line">        System.out.println(uuidName);</span><br><span class="line">        File target = <span class="keyword">new</span> File(dir, uuidName);</span><br><span class="line">        photo.transferTo(target);<span class="comment">//存放文件</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="第三步：配置文件解析器"><a href="#第三步：配置文件解析器" class="headerlink" title="第三步：配置文件解析器"></a>第三步：配置文件解析器</h5><h6 id="webApplicationContext-xml文件"><a href="#webApplicationContext-xml文件" class="headerlink" title="webApplicationContext.xml文件"></a>webApplicationContext.xml文件</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 上传文件解析器配置：id值是固定的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置默认编码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"utf-8"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 最大文件大小：字节为单位，这里配置文5M --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"5242880"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;​    SpringMVC基于模型–视图–控制器（Model-View-Controller，MVC）模式实现，属于SpringFrameWork的后续产品，已经融合在SpringWebFlow里面。它通过一套注解，让一个简单的Java类成为处理请求的控制器，而无需实现任何接口。同时它还支持RESTful编程风格的请求。SpringMVC是基于方法设计的，相比基于类设计的Struts2要稍微快一些。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://songhui.club/source/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://songhui.club/source/tags/Spring/"/>
    
      <category term="SpringMVC" scheme="http://songhui.club/source/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>SSM整合及聚合工程</title>
    <link href="http://songhui.club/Spring/2020/ssm-group.html"/>
    <id>http://songhui.club/Spring/2020/ssm-group.html</id>
    <published>2020-01-18T08:06:06.000Z</published>
    <updated>2020-01-18T08:09:51.907Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>​    所谓整合，即将配置汇总到一起统一管理。在整合之前要确保由其单独搭建的开发环境是没有任何错误的，这样利于排错</p><ul><li>Spring整合MyBatis</li><li>Spring整合SpringMVC</li><li>使用Maven搭建SSM工程</li><li>使用Maven搭建SSM聚合工程</li></ul><a id="more"></a><h1 id="1-Spring整合MyBatis"><a href="#1-Spring整合MyBatis" class="headerlink" title="1. Spring整合MyBatis"></a>1. Spring整合MyBatis</h1><h2 id="1-1-搭建mybatis的开发环境并测试通过"><a href="#1-1-搭建mybatis的开发环境并测试通过" class="headerlink" title="1.1 搭建mybatis的开发环境并测试通过"></a>1.1 搭建mybatis的开发环境并测试通过</h2><h5 id="mybatis-config-xml主要配置"><a href="#mybatis-config-xml主要配置" class="headerlink" title="mybatis-config.xml主要配置"></a>mybatis-config.xml主要配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.引入外部的配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2.配置延迟加载,即sql优化 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启用懒加载策略 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 覆盖掉延迟加载的触发方法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadTriggerMethods"</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 二级缓存配置(默认开启,此行可省略) --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用二级缓存,在对应的mapper.xml中加入cache即可 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;setting name="cacheEnabled" value="true"/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3.类别名的配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 单个类的配置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;typeAlias type="User" alias="user"/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置druid数据源工厂类别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"DataSourceFactory"</span> <span class="attr">alias</span>=<span class="string">"DRUID"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 给包中所有的类配置默认别名, 即类名首字母小写--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.dintalk.domain"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 4.使用默认的环境配置(可以是多个) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 事务管理器,此处配置 为JDBC --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;transactionManager type="JDBC"&gt;&lt;/transactionManager&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据源配置,此处配置为 POOLED--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;dataSource  type="POOLED"&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span>  <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置数据库连接 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 5.注册映射文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定资源文件路径 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;mapper resource="cn/dintalk/dao/UserMapper.xml"&gt;&lt;/mapper&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;mapper resource="cn/dintalk/dao/LoginInfoMapper.xml"&gt;&lt;/mapper&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 基于Mapper接口的开发:指定类名--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;mapper class="UserMapper"/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定基于Mapper接口开发的包:(需类名和xml文件名一致,包名一致)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.dintalk.dao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-2-搭建Spring的开发环境并测试通过"><a href="#1-2-搭建Spring的开发环境并测试通过" class="headerlink" title="1.2 搭建Spring的开发环境并测试通过"></a>1.2 搭建Spring的开发环境并测试通过</h2><h5 id="applicationContext-xml主要配置"><a href="#applicationContext-xml主要配置" class="headerlink" title="applicationContext.xml主要配置"></a>applicationContext.xml主要配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.导入外部的数据源属性配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2.配置注解扫描包路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.dintalk"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3.Druid数据源的配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 基于xml的 声明式事务控制 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1.将事务管理器交给Spring进行管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2.配置事务通知的属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"transfer"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"add*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3.配置切面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* cn.dintalk..*.*(..))"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-3-进行整合"><a href="#1-3-进行整合" class="headerlink" title="1.3 进行整合"></a>1.3 进行整合</h2><h5 id="第一步：导入整合包的坐标"><a href="#第一步：导入整合包的坐标" class="headerlink" title="第一步：导入整合包的坐标"></a>第一步：导入整合包的坐标</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.3.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h5 id="第二步：Spring接管Mybatis的主要配置"><a href="#第二步：Spring接管Mybatis的主要配置" class="headerlink" title="第二步：Spring接管Mybatis的主要配置"></a>第二步：Spring接管Mybatis的主要配置</h5><h5 id="applicationContext-xml接管mybatis的主要配置"><a href="#applicationContext-xml接管mybatis的主要配置" class="headerlink" title="applicationContext.xml接管mybatis的主要配置"></a>applicationContext.xml接管mybatis的主要配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring接管mybatis-config.xml的配置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1.接管SqlSessionFactory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--类别名配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"cn.dintalk.estore"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据源配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2.基于接口的mybatis的Mapper交给Spring管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mapperScan"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定Mapper所在的包,Spring接管Mapper接口对应的代理对象存于容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"cn.dintalk.estore.dao"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定sqlSessisonFactory的名字,若容器中仅有一个可忽略--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-Spring整合SpringMVC"><a href="#2-Spring整合SpringMVC" class="headerlink" title="2. Spring整合SpringMVC"></a>2. Spring整合SpringMVC</h1><h2 id="2-1-搭建Spring开发环境并测试通过"><a href="#2-1-搭建Spring开发环境并测试通过" class="headerlink" title="2.1 搭建Spring开发环境并测试通过"></a>2.1 搭建Spring开发环境并测试通过</h2><h2 id="2-2-搭建SpringMVC的开发环境并测试通过"><a href="#2-2-搭建SpringMVC的开发环境并测试通过" class="headerlink" title="2.2 搭建SpringMVC的开发环境并测试通过"></a>2.2 搭建SpringMVC的开发环境并测试通过</h2><h5 id="第一步：创建springmvc-xml并添加以下配置"><a href="#第一步：创建springmvc-xml并添加以下配置" class="headerlink" title="第一步：创建springmvc.xml并添加以下配置"></a>第一步：创建springmvc.xml并添加以下配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 扫描web层的包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.dintalk.estore.web.controller"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="第二步：修改web-xml头约束并配置如下"><a href="#第二步：修改web-xml头约束并配置如下" class="headerlink" title="第二步：修改web.xml头约束并配置如下"></a>第二步：修改web.xml头约束并配置如下</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置前端控制器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置post请求过滤器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-3-整合"><a href="#2-3-整合" class="headerlink" title="2.3 整合"></a>2.3 整合</h2><h5 id="第一步：在web-xml中添加配置如下"><a href="#第一步：在web-xml中添加配置如下" class="headerlink" title="第一步：在web.xml中添加配置如下"></a>第一步：在web.xml中添加配置如下</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置spring父容器的启动时机 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Tips:</strong> 这样配置的目的就是为了使springmvc的容器可以获得spring容器内的实例。因此配置一个监听器，在应用加载时就加载spring容器。</p><h1 id="3-使用Maven搭建SSM工程"><a href="#3-使用Maven搭建SSM工程" class="headerlink" title="3. 使用Maven搭建SSM工程"></a>3. 使用Maven搭建SSM工程</h1><p>​    按照清晰的思路并进行阶段的测试，搭建SSM工程就是一个小case!(导入pom文件中的依赖坐标是基本功，这里不再赘述)。</p><h2 id="3-1-思路整理"><a href="#3-1-思路整理" class="headerlink" title="3.1 思路整理"></a>3.1 思路整理</h2><ul><li>第一步：保证mybatis独立运行</li><li>第二步：保证spring的Ioc可以独立运行</li><li>第三步：整合spring和mybatis（spring接管SqlSessionFactory的创建，以及dao接口的代理实现类创建）</li><li>第四步：保证spring的事务可以使用，测试整合结果</li><li>第五步：保证springmvc可以独立运行<br>第六步：整合spring和springMVC     </li></ul><h2 id="3-2-编写顺序："><a href="#3-2-编写顺序：" class="headerlink" title="3.2 编写顺序："></a>3.2 编写顺序：</h2><ul><li>第一：实体类（数据模型，三层都用）</li><li>第二：编写持久层接口和映射配置（..Dao.xml）</li><li>第三：编写业务层的接口和实现类</li><li>第四：编写applicationContext.xml文件并测试（service+dao）</li><li>第五：编写sprinmvc.xml、web.xml、控制器和页面并测试（springmvc)</li><li>第六：web+service+dao测试</li></ul><h2 id="3-3-配置文件主要内容"><a href="#3-3-配置文件主要内容" class="headerlink" title="3.3 配置文件主要内容"></a>3.3 配置文件主要内容</h2><h5 id="applicationContext-xml"><a href="#applicationContext-xml" class="headerlink" title="applicationContext.xml"></a>applicationContext.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.导入数据源的外部配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2.指定注解扫描的包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.dintalk.dao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.dintalk.service"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3.配置数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 4.配置sqlSessionFactory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"cn.dintalk.domain"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 5.配置mapper扫描 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mapperScan"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.itheima.dao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 6.配置事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 7.配置事务通知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">read-only</span>=<span class="string">"false"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 8.配置切面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt1"</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.dintalk.service.*.*(..))"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="springmvc-xml主要配置"><a href="#springmvc-xml主要配置" class="headerlink" title="springmvc.xml主要配置"></a>springmvc.xml主要配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.配置注解扫描的路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.dintalk.web"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2.开启注解支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3.配置视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 4.静态资源放行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br></pre></td></tr></table></figure><h5 id="web-xml主要配置"><a href="#web-xml主要配置" class="headerlink" title="web.xml主要配置"></a>web.xml主要配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.配置监听器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2.配置前端控制器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3.配置字符过滤器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="4-使用Maven搭建SSM聚合工程"><a href="#4-使用Maven搭建SSM聚合工程" class="headerlink" title="4. 使用Maven搭建SSM聚合工程"></a>4. 使用Maven搭建SSM聚合工程</h1><h2 id="4-1-创建父工程"><a href="#4-1-创建父工程" class="headerlink" title="4.1 创建父工程"></a>4.1 创建父工程</h2><h5 id="第一步-创建父工程"><a href="#第一步-创建父工程" class="headerlink" title="第一步:创建父工程"></a>第一步:创建父工程</h5><p>​    创建父工程时不选择任何的maven骨架,使用其默认的(java项目)即可。</p><h5 id="第二步-配置父工程的pom文件"><a href="#第二步-配置父工程的pom文件" class="headerlink" title="第二步:配置父工程的pom文件"></a>第二步:配置父工程的pom文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1.父工程的打包方式：pom--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2.集中定义依赖版本号 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pagehelper.version</span>&gt;</span>5.1.2<span class="tag">&lt;/<span class="name">pagehelper.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-api.version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">servlet-api.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.2.8<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis.spring.version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">mybatis.spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.32<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.0.9<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">commons-fileupload.version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">commons-fileupload.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activemq.version</span>&gt;</span>5.11.2<span class="tag">&lt;/<span class="name">activemq.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3.导入依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-2-创建子模块"><a href="#4-2-创建子模块" class="headerlink" title="4.2 创建子模块"></a>4.2 创建子模块</h2><p>​    父工程上右击,创建子模块，（只将ssm_web模块建为web骨架即可，其他默认（java））。</p><p>-| ssm_parent</p><p>​    -| ssm_common</p><p>​    -| ssm_domain</p><p>​    -| ssm_dao</p><p>​    -| ssm_service</p><p>​    -| ssm_web</p><h5 id="第一步：创建各模块建的依赖关系"><a href="#第一步：创建各模块建的依赖关系" class="headerlink" title="第一步：创建各模块建的依赖关系"></a>第一步：创建各模块建的依赖关系</h5><p>修改各个模块建的pom文件，添加依赖关系（利用依赖的传递性，简化结构）。</p><h5 id="第二步：在各模块下配置各模块的配置文件"><a href="#第二步：在各模块下配置各模块的配置文件" class="headerlink" title="第二步：在各模块下配置各模块的配置文件"></a>第二步：在各模块下配置各模块的配置文件</h5><p>|- ssm_dao</p><p>​        |-resources</p><p>​            |-cn….                 // ..Dao.xml 映射文件</p><p>​            |- jdbc.properties</p><p>​            |- spring/applicaitonContext-dao.xml  //只做关于dao层的相关配置</p><p>|- ssm_service</p><p>​        |- resources</p><p>​            |-spring/applicationContext-tx.xml  //只做关于service层的相关配置</p><p>|- ssm_web</p><p>​        |- resources</p><p>​            |- spring/spring-mvc.xml     //只做web层的相关配置</p><h5 id="第三步：修改web-xml文件中的路径"><a href="#第三步：修改web-xml文件中的路径" class="headerlink" title="第三步：修改web.xml文件中的路径"></a>第三步：修改web.xml文件中的路径</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置监听器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath*:spring/applicationContext-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 配置前端控制器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Tips:</strong> 父工程不写代码的，只在pom文件中对依赖做统一限定。配置文件也分模块后，在web.xml中配置监听器时需要使用通配符* 进行匹配，确保所有的配置文件可以加载。在service层配置文件中会需要用到dao层中配置文件的引用，在编译阶段会报错，但是运行阶段不会。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;​    所谓整合，即将配置汇总到一起统一管理。在整合之前要确保由其单独搭建的开发环境是没有任何错误的，这样利于排错&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spring整合MyBatis&lt;/li&gt;
&lt;li&gt;Spring整合SpringMVC&lt;/li&gt;
&lt;li&gt;使用Maven搭建SSM工程&lt;/li&gt;
&lt;li&gt;使用Maven搭建SSM聚合工程&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://songhui.club/source/categories/Spring/"/>
    
    
      <category term="MyBatis" scheme="http://songhui.club/source/tags/MyBatis/"/>
    
      <category term="Spring" scheme="http://songhui.club/source/tags/Spring/"/>
    
      <category term="SpringMVC" scheme="http://songhui.club/source/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>Spring --常见数据源及声明式事务配置</title>
    <link href="http://songhui.club/Spring/2020/Spring-datasource.html"/>
    <id>http://songhui.club/Spring/2020/Spring-datasource.html</id>
    <published>2020-01-18T08:00:09.000Z</published>
    <updated>2020-01-18T08:05:16.067Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>​    Spring自带了一组数据访问框架,集成了多种数据访问技术。无论我们是直接通过 JDBC 还是像Hibernate或Mybatis那样的框架实现数据持久化，Spring都可以为我们消除持久化代码中那些单调枯燥的数据访问逻辑。Spring对大多数的持久化方式提供支持。</p><a id="more"></a><p>Spring在数据访问中使用模板的模式，将访问过程中固定的和可变的部分明确划分为两个不同的类：模板（template）和回调（callback）。模板处理数据访问中固定的部分——事务控制、管理资源及处理异常，而回调处理应用程序相关的的数据访问——语句、绑定参数及整理结果集。基于此，我们只需关心自己的数据访问逻辑即可。针对不同的持久化平台，Spring提供了多个可选的模板，如果直接使用JDBC，那么我们可以选择JdbcTemplate。</p><h1 id="1-常见数据源的配置"><a href="#1-常见数据源的配置" class="headerlink" title="1. 常见数据源的配置"></a>1. 常见数据源的配置</h1><p>​    无论我们选择哪一种数据访问方式，都需要配置一个数据源的引用。我们总结了几种常见的数据源配置方式。</p><h3 id="1-1-导入外部的数据源属性配置文件"><a href="#1-1-导入外部的数据源属性配置文件" class="headerlink" title="1.1 导入外部的数据源属性配置文件"></a>1.1 导入外部的数据源属性配置文件</h3><h5 id="jdbc-properties"><a href="#jdbc-properties" class="headerlink" title="jdbc.properties:"></a>jdbc.properties:</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql:///spring_02</span><br><span class="line">jdbc.username=sh</span><br><span class="line">jdbc.password=sh123</span><br></pre></td></tr></table></figure><h5 id="applicationContext-xml中进行导入"><a href="#applicationContext-xml中进行导入" class="headerlink" title="applicationContext.xml中进行导入"></a>applicationContext.xml中进行导入</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入外部的数据源属性配置文件 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第一种方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span> <span class="attr">value</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第二种方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-Spring内置数据源"><a href="#1-2-Spring内置数据源" class="headerlink" title="1.2 Spring内置数据源"></a>1.2 Spring内置数据源</h3><h5 id="第一步：导入jar包或Maven坐标"><a href="#第一步：导入jar包或Maven坐标" class="headerlink" title="第一步：导入jar包或Maven坐标"></a>第一步：导入jar包或Maven坐标</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="第二步：在applicationContext-xml中配置"><a href="#第二步：在applicationContext-xml中配置" class="headerlink" title="第二步：在applicationContext.xml中配置"></a>第二步：在applicationContext.xml中配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.Spring内置的数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Tips:</strong> DriverManagerDataSource是一个标准的数据源（实现了接口javax.sql.DataSource）。没有连接池技术，没次都会获取新的数据库连接。用于学习、练习及小应用。</p><h3 id="1-3-C3P0数据源"><a href="#1-3-C3P0数据源" class="headerlink" title="1.3 C3P0数据源"></a>1.3 C3P0数据源</h3><h5 id="第一步：导入jar包或Maven坐标-1"><a href="#第一步：导入jar包或Maven坐标-1" class="headerlink" title="第一步：导入jar包或Maven坐标"></a>第一步：导入jar包或Maven坐标</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.mchange&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;c3p0&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.9.5.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h5 id="第二步：在applicationContext-xml中配置-1"><a href="#第二步：在applicationContext-xml中配置-1" class="headerlink" title="第二步：在applicationContext.xml中配置"></a>第二步：在applicationContext.xml中配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 2.C3P0数据源的配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource1"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Tips:</strong> C3P0是一个标准的数据源，带有池技术，适合生产环境。</p><h3 id="1-4-Druid数据源"><a href="#1-4-Druid数据源" class="headerlink" title="1.4 Druid数据源"></a>1.4 Druid数据源</h3><h5 id="第一步：导入jar包或Maven坐标-2"><a href="#第一步：导入jar包或Maven坐标-2" class="headerlink" title="第一步：导入jar包或Maven坐标"></a>第一步：导入jar包或Maven坐标</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="第二步：在applicationContext-xml中配置-2"><a href="#第二步：在applicationContext-xml中配置-2" class="headerlink" title="第二步：在applicationContext.xml中配置"></a>第二步：在applicationContext.xml中配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 3.Druid数据源的配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource2"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Tips:</strong> Druid是一个标准数据源，带有池技术，适合生产环境</p><h3 id="1-5-DBCP数据源"><a href="#1-5-DBCP数据源" class="headerlink" title="1.5 DBCP数据源"></a>1.5 DBCP数据源</h3><h5 id="第一步：导入jar包或Maven坐标-3"><a href="#第一步：导入jar包或Maven坐标-3" class="headerlink" title="第一步：导入jar包或Maven坐标"></a>第一步：导入jar包或Maven坐标</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="第二步：在applicationContext-xml中配置-3"><a href="#第二步：在applicationContext-xml中配置-3" class="headerlink" title="第二步：在applicationContext.xml中配置"></a>第二步：在applicationContext.xml中配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 4.DBCP数据源的配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource3"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Tips:</strong> tomcat内置的就是dbcp数据源，也是一个标准的数据源，带有池技术，适合生        </p><p>​    产环境。</p><h1 id="2-JdbcDaoSupport"><a href="#2-JdbcDaoSupport" class="headerlink" title="2. JdbcDaoSupport"></a>2. JdbcDaoSupport</h1><h3 id="2-1-使用jdbcTemplate"><a href="#2-1-使用jdbcTemplate" class="headerlink" title="2.1 使用jdbcTemplate"></a>2.1 使用jdbcTemplate</h3><h5 id="dao实现类关键代码"><a href="#dao实现类关键代码" class="headerlink" title="dao实现类关键代码"></a>dao实现类关键代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJdbcTemplate</span><span class="params">(JdbcTemplate jdbcTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">"insert into accounts VALUES (null,?,?)"</span></span><br><span class="line">        ,account.getAccountName(),account.getBalance());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="applicationContext-xml关键配置"><a href="#applicationContext-xml关键配置" class="headerlink" title="applicationContext.xml关键配置"></a>applicationContext.xml关键配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">&lt;!-- JdbcTemplate配置bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTem"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>--&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"cn.dintalk.dao.impl.AccountDaoImpl"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">ref</span>=<span class="string">"jdbcTem"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-继承JdbcDaoSupport"><a href="#2-2-继承JdbcDaoSupport" class="headerlink" title="2.2 继承JdbcDaoSupport"></a>2.2 继承JdbcDaoSupport</h3><p>JdbcDaoSupport是Spring框架为我们提供的一个类，该类中定义了一个JdbcTemplate对象，我们可以直接获取使用，但是要创建该对象，需要为其提供一个数据源：</p><h5 id="JdbcDaoSupport关键源代码"><a href="#JdbcDaoSupport关键源代码" class="headerlink" title="JdbcDaoSupport关键源代码"></a>JdbcDaoSupport关键源代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcDaoSupport</span> <span class="keyword">extends</span> <span class="title">DaoSupport</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JdbcDaoSupport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.jdbcTemplate == <span class="keyword">null</span> || dataSource != <span class="keyword">this</span>.jdbcTemplate.getDataSource()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.jdbcTemplate = <span class="keyword">this</span>.createJdbcTemplate(dataSource);</span><br><span class="line">            <span class="keyword">this</span>.initTemplateConfig();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> JdbcTemplate <span class="title">createJdbcTemplate</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="dao实现类关键代码-1"><a href="#dao实现类关键代码-1" class="headerlink" title="dao实现类关键代码"></a>dao实现类关键代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此时，实现类需要继承JdbcDaoSupport</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl1</span> <span class="keyword">extends</span> <span class="title">JdbcDaoSupport</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Account account)</span> </span>&#123;<span class="comment">//父类的 getJdbcTemplate（）方法。</span></span><br><span class="line">        getJdbcTemplate().update(<span class="string">"insert into accounts VALUES (null,?,?)"</span></span><br><span class="line">        ,account.getAccountName(),account.getBalance());</span><br><span class="line">        System.out.println(<span class="string">"是我,没错"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="applicationContext-xml关键配置-1"><a href="#applicationContext-xml关键配置-1" class="headerlink" title="applicationContext.xml关键配置"></a>applicationContext.xml关键配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">&lt;!-- JdbcDataSupport配置 bean 需要为父类注入数据源依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"cn.dintalk.dao.impl.AccountDaoImpl1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Tips:</strong> 因为AccountDaoImpl1继承了JdbcDataSupport，所以我们这里配置子类（间接给父类）就</p><p>​    可以。当然，我们也可以不配置数据源，直接配置（间接给父类）一个jdbcTemplate也是可</p><p>​    以的。</p><p><strong>总结：</strong></p><ul><li>第一种在Dao类中定义JdbcTemplate的方式，适用于所有配置方式（xml和注解都可以）。</li><li>第二种让Dao继承JdbcDaoSupport的方式，只能用于基于xml的方式，注解用不了。</li></ul><h1 id="3-声明式事务的配置"><a href="#3-声明式事务的配置" class="headerlink" title="3. 声明式事务的配置"></a>3. 声明式事务的配置</h1><h2 id="3-1-Spring事务控制的API简介"><a href="#3-1-Spring事务控制的API简介" class="headerlink" title="3.1 Spring事务控制的API简介"></a>3.1 Spring事务控制的API简介</h2><h3 id="3-1-1-PlatformTransactionManager"><a href="#3-1-1-PlatformTransactionManager" class="headerlink" title="3.1.1 PlatformTransactionManager"></a>3.1.1 PlatformTransactionManager</h3><p>​    此接口是Spring的事务管理器，提供了常用的操作事务的方法，包含3个具体的操作</p><ul><li>获取事务状态信息：Transaction   getTransaction(TransactionDefinition definition)</li><li>提交事务： void  commit(TransactionStatus status)</li><li>回滚事务： void  rollback(TansactionStatus status)</li></ul><p>我们在开发时都是使用它的实现类，在使用Spring JDBC或Mybatis进行持久化数据时，真正管理事务的对象是：</p><p>org.springframework.jdbc.datasource.DataSourceTransactionManager</p><h3 id="3-1-2-TransactionDefinition"><a href="#3-1-2-TransactionDefinition" class="headerlink" title="3.1.2 TransactionDefinition"></a>3.1.2 TransactionDefinition</h3><p>​    它是事务的定义信息对象，内有如下方法：</p><ul><li>获取事务对象名称     ：String  getName()</li><li>获取事务隔离级别    ： int   getIsolationLevel()</li><li>获取事务传播行为    ： int   getPropagationBehavior()</li><li>获取事务超时时间      :  int   getTimeOut()</li><li>获取事务是否是只读 ： boolean  isReadOnly()</li></ul><p><strong>Tips:</strong> 并不是所有的数据库都支持事务支持的，默认为-1,即没有超时限制。</p><p>​    读写型事务：增删改时开启事务。</p><p>​    只读型事务：执行查询时也开启事务。</p><h5 id="事务的传播行为"><a href="#事务的传播行为" class="headerlink" title="事务的传播行为"></a>事务的传播行为</h5><p>m1方法有自己的事务，m2方法也有自己的事务，若m2方法中调用了m1的方法，那m1该采用什么用的事务？</p><p>​    这里只介绍常用的两种：</p><ul><li>REQUIRED:若m2有事务，则m1加入到m2的事务；若m2没有事务，m1用自己的事务。</li><li>SUPPORTS:若m2有事务，则m1加入到m2的事务；若m2没有事务，m1放弃事务。</li></ul><h3 id="3-1-3-TransactionStatus"><a href="#3-1-3-TransactionStatus" class="headerlink" title="3.1.3 TransactionStatus"></a>3.1.3 TransactionStatus</h3><p>此接口提供事务具体的运行状态：</p><ul><li>刷新事务      ：  void  flush()</li><li>是否有存储点：boolean  hasSavepoint()</li><li>事务是否完成：boolean  isCompleted()</li><li>是否为新的事务： isNew  Transaction()</li><li>事务是否回滚：  boolean  isRollbackOnly()</li><li>设置事务回滚：void  setRollbackOnly()</li></ul><h2 id="3-2-事务管理器-DataSourceTransactionManager"><a href="#3-2-事务管理器-DataSourceTransactionManager" class="headerlink" title="3.2 事务管理器 DataSourceTransactionManager"></a>3.2 事务管理器 DataSourceTransactionManager</h2><p>​    事务控制是横切面问题，采用AOP编程，通知代码即事务管理器是一个实现了</p><p>PlatformTransactionManager的类，Spring已经为我们提供好了。这里我们使用</p><p>DataSourceTransactionManager。</p><p>*<em>Tips： *</em> 此事务管理器仅用于实现了标准数据源的事务控制。</p><h2 id="3-3-基于xml的事务控制配置"><a href="#3-3-基于xml的事务控制配置" class="headerlink" title="3.3 基于xml的事务控制配置"></a>3.3 基于xml的事务控制配置</h2><h5 id="第一步：编写核心业务代码"><a href="#第一步：编写核心业务代码" class="headerlink" title="第一步：编写核心业务代码"></a>第一步：编写核心业务代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(AccountDao accountDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceAccount, String targetAccount, Float money)</span> </span>&#123;</span><br><span class="line">        Account source = accountDao.findByName(sourceAccount);</span><br><span class="line">        Account target = accountDao.findByName(targetAccount);</span><br><span class="line">        source.setBalance(source.getBalance()-money);</span><br><span class="line">        target.setBalance(target.getBalance()+money);</span><br><span class="line">        accountDao.update(source);</span><br><span class="line"><span class="comment">//        int i=1/0;</span></span><br><span class="line">        accountDao.update(target);</span><br></pre></td></tr></table></figure><h5 id="第二步：配置applicationContext-xml"><a href="#第二步：配置applicationContext-xml" class="headerlink" title="第二步：配置applicationContext.xml"></a>第二步：配置applicationContext.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.导入外部的数据源属性配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2.配置Spring内置的数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3.IOC配置 Bean和JdbcTemplate配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTem"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>--&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"cn.dintalk.dao.impl.AccountDaoImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">ref</span>=<span class="string">"jdbcTem"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"cn.dintalk.service.impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountDao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--=============================== --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 基于xml的 声明式事务控制 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1.将事务管理器交给Spring进行管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2.配置事务通知的属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"transfer"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"add*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3.配置切面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* cn.dintalk..*.*(..))"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Tips:</strong>  事务通知属性中的method配置精确控制到方法名，而切点的配置则是模糊匹配。两者并不冲突，而是相互</p><p>​    配合。</p><ul><li>如果事务管理器的id为“transactionManager” 则事务通知中的：transaction-manager=”…“可以省略。</li></ul><h2 id="3-4-基于注解的事务控制配置"><a href="#3-4-基于注解的事务控制配置" class="headerlink" title="3.4 基于注解的事务控制配置"></a>3.4 基于注解的事务控制配置</h2><h5 id="第一步：添加IOC注解"><a href="#第一步：添加IOC注解" class="headerlink" title="第一步：添加IOC注解"></a>第一步：添加IOC注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dao实现类关键代码</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"><span class="comment">// service实现类关键代码   </span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line">    <span class="comment">//配置事务管理器</span></span><br><span class="line">    <span class="comment">//要求事务管理器id必须是transactionManager方可省略</span></span><br><span class="line">    <span class="meta">@Transactional</span>(readOnly = <span class="keyword">false</span>,propagation = Propagation.REQUIRED)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceAccount, String targetAccount, Float money)</span> </span>&#123;</span><br><span class="line">        Account source = accountDao.findByName(sourceAccount);</span><br><span class="line">        Account target = accountDao.findByName(targetAccount);</span><br><span class="line">        source.setBalance(source.getBalance()-money);</span><br><span class="line">        target.setBalance(target.getBalance()+money);</span><br><span class="line">        accountDao.update(source);</span><br><span class="line"><span class="comment">//        int i=1/0;</span></span><br><span class="line">        accountDao.update(target);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="第二步：添加applicationContext-xml关键配置"><a href="#第二步：添加applicationContext-xml关键配置" class="headerlink" title="第二步：添加applicationContext.xml关键配置"></a>第二步：添加applicationContext.xml关键配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.dintalk"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1.将事务管理器交给Spring进行管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2.开启注解事务的支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h5 id="第三步：测试关键代码-xml和注解方式通用"><a href="#第三步：测试关键代码-xml和注解方式通用" class="headerlink" title="第三步：测试关键代码(xml和注解方式通用)"></a>第三步：测试关键代码(xml和注解方式通用)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTransfer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        accountService.transfer(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="number">1f</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-基于类的事务控制配置"><a href="#3-5-基于类的事务控制配置" class="headerlink" title="3.5 基于类的事务控制配置"></a>3.5 基于类的事务控制配置</h2><h5 id="第一步：编写配置类"><a href="#第一步：编写配置类" class="headerlink" title="第一步：编写配置类"></a>第一步：编写配置类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"cn.dintalk"</span>)</span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:jdbc.properties"</span>)<span class="comment">// 加载外部属性配置文件</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span>  <span class="comment">//开启注解事务的支持</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.driverClassName&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String driverClassName;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.url&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.username&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.password&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"><span class="comment">// 将数据源交予Spring容器</span></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"dataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">createDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DriverManagerDataSource dataSource = <span class="keyword">new</span> DriverManagerDataSource();</span><br><span class="line">        dataSource.setDriverClass(driverClassName);</span><br><span class="line">        dataSource.setJdbcUrl(url);</span><br><span class="line">        dataSource.setUser(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//将jdbcTemplate交予Spring容器</span></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"jdbcTemplate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">createJdbcTem</span><span class="params">(@Qualifier(<span class="string">"dataSource"</span>)</span> DataSource dataSource)</span>&#123;</span><br><span class="line">        JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//将事务管理器交予Spring容器</span></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"transactionManager"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">createTransManager</span><span class="params">(@Qualifier(<span class="string">"dataSource"</span>)</span> </span></span><br><span class="line"><span class="function">                                                           DataSource dataSource)</span>&#123;</span><br><span class="line">        DataSourceTransactionManager dataSourceTransactionManager = </span><br><span class="line">            <span class="keyword">new</span> DataSourceTransactionManager(dataSource);</span><br><span class="line">        <span class="keyword">return</span> dataSourceTransactionManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="第二步：添加IOC注解"><a href="#第二步：添加IOC注解" class="headerlink" title="第二步：添加IOC注解"></a>第二步：添加IOC注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dao实现类关键代码</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"><span class="comment">// service实现类关键代码   </span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line">    <span class="comment">//配置事务管理器</span></span><br><span class="line">    <span class="comment">//要求事务管理器id必须是transactionManager方可省略</span></span><br><span class="line">    <span class="meta">@Transactional</span>(readOnly = <span class="keyword">false</span>,propagation = Propagation.REQUIRED)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceAccount, String targetAccount, Float money)</span> </span>&#123;</span><br><span class="line">        Account source = accountDao.findByName(sourceAccount);</span><br><span class="line">        Account target = accountDao.findByName(targetAccount);</span><br><span class="line">        source.setBalance(source.getBalance()-money);</span><br><span class="line">        target.setBalance(target.getBalance()+money);</span><br><span class="line">        accountDao.update(source);</span><br><span class="line"><span class="comment">//        int i=1/0;</span></span><br><span class="line">        accountDao.update(target);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="第三步：测试关键代码"><a href="#第三步：测试关键代码" class="headerlink" title="第三步：测试关键代码"></a>第三步：测试关键代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">classes</span> </span>= &#123;SpringConfig<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">AccountServiceClassTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTransfer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        accountService.transfer(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="number">3f</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;​    Spring自带了一组数据访问框架,集成了多种数据访问技术。无论我们是直接通过 JDBC 还是像Hibernate或Mybatis那样的框架实现数据持久化，Spring都可以为我们消除持久化代码中那些单调枯燥的数据访问逻辑。Spring对大多数的持久化方式提供支持。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://songhui.club/source/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://songhui.club/source/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring -- 春雨润物之 IOC</title>
    <link href="http://songhui.club/Spring/2020/Spring-Ioc.html"/>
    <id>http://songhui.club/Spring/2020/Spring-Ioc.html</id>
    <published>2020-01-18T07:55:01.000Z</published>
    <updated>2020-01-18T07:59:26.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>​    作为一个Java人，想必都或多或少的了解过Spring。对于其优势也能道个一二，诸如方便解耦、支持AOP编程、支持声明式事务、方便测试等等。Spring也不仅仅局限于服务器端开发，它可以做非常多的事情，任何Java应用都可以在简单性、可测试性和松耦合等方面从Spring中受益。Spring丰富功能的底层都依赖于它的两个核心特性</p><a id="more"></a><ul><li>控制反转 IOC (Inversion Of Control)</li><li>面向切面编程 AOP (Aspect-Oriented Programming)</li></ul><p>控制反转指的是应用中的对象依赖关系不在由自己维护，而交给Spring由它的容器帮我们维护，因此也叫做依赖注入DI (Dependency Injection)。</p><h1 id="1-使用BeanFactory解耦"><a href="#1-使用BeanFactory解耦" class="headerlink" title="1. 使用BeanFactory解耦"></a>1. 使用BeanFactory解耦</h1><p>​    这里使用BeanFactory来降低我们熟知的MVC编程模式中service层与dao层之间的耦合关系。</p><h5 id="解耦前（service层关键代码）"><a href="#解耦前（service层关键代码）" class="headerlink" title="解耦前（service层关键代码）"></a>解耦前（service层关键代码）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Service层中需要Dao层的实例来与数据库交互完成业务逻辑</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        userDao.addUser(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​    可以看出，如果我们不做解耦操作，那么Service层中强烈依赖UserDao的实现类UserDaoImpl（即如果不new UserDaoImpl()，Service层将寸步难行）。</p><h5 id="解耦后（service层关键代码）"><a href="#解耦后（service层关键代码）" class="headerlink" title="解耦后（service层关键代码）"></a>解耦后（service层关键代码）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;<span class="comment">// 提供set方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        userDao.addUser(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Object&gt; beans = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    <span class="comment">//静态代码块加载资源</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ResourceBundle bundle = ResourceBundle.getBundle(<span class="string">"objects"</span>);</span><br><span class="line">            Enumeration&lt;String&gt; keys = bundle.getKeys();</span><br><span class="line">            <span class="keyword">while</span> (keys.hasMoreElements()) &#123;</span><br><span class="line">                String key = keys.nextElement();</span><br><span class="line">                String className = bundle.getString(key);</span><br><span class="line">                Object clazz = Class.forName(className).newInstance();</span><br><span class="line">                beans.put(key, clazz);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"加载类配置文件出错!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//对外提供获取bean的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(String className, Class&lt;T&gt; T)</span> </span>&#123;</span><br><span class="line">        Object o = beans.get(className);</span><br><span class="line">        <span class="keyword">if</span> (o != <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> (T) o;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"找不到类:"</span> + className);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="objects-properties"><a href="#objects-properties" class="headerlink" title="objects.properties"></a>objects.properties</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userDao&#x3D;com.dintalk.dao.impl.UserDaoImpl</span><br></pre></td></tr></table></figure><h5 id="为UserServiceImpl实例注入依赖"><a href="#为UserServiceImpl实例注入依赖" class="headerlink" title="为UserServiceImpl实例注入依赖"></a>为UserServiceImpl实例注入依赖</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UserServiceImpl userServiceImpl = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">UserDao userDao = BeanFactory.getBean(<span class="string">"userDao"</span>,UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">userServiceImpl.setUserDao(userDao);</span><br></pre></td></tr></table></figure><h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h5><p>​    解耦前，service层中直接new出了其所依赖的实例对象userDaoImpl。而通过工厂解耦后，service中只声明了UserDao的接口引用，并提供了set方法，我们在使用servcie时，可以通过set方法传入从工厂中获得的实现了UserDao接口的任一实现类的实例。而实现类的配置又暴露在了配置文件当中，解耦的同时也增加了程序的动态性。</p><h5 id="BeanFactory原理："><a href="#BeanFactory原理：" class="headerlink" title="BeanFactory原理："></a>BeanFactory原理：</h5><p>​    这里使用的是静态工厂，在工厂类中定义了一个Map用于存放工厂管理的Bean实例，静态代码块随类的加载执行一次，读取配置文件中的key-value信息。通过循环和反射，将配置文件中的key仍作为Map的key；将配置文件中key对应的类全限定名通过反射构造实例后作为其对应的value存于Map中。达到这样的效果：BeanFactory类加载完毕后，它便管理了一个Map集合，Map集合的key就是配置文件中的key，Map中的value就是配置文件中value对应的类的实例。如此，对外提供一个getBean方法，通过key返回其对应的实例，这便实现了通过BeanFactory来管理实例对象。</p><h1 id="2-Spring使用步骤"><a href="#2-Spring使用步骤" class="headerlink" title="2. Spring使用步骤"></a>2. Spring使用步骤</h1><p>以使用xml配置文件的方式示例：</p><h3 id="2-1-导入坐标或jar包"><a href="#2-1-导入坐标或jar包" class="headerlink" title="2.1 导入坐标或jar包"></a>2.1 导入坐标或jar包</h3><p>​    如果使用Maven构建，我们可以导入spring-context。因为上下文模块依赖其他模块，所有其他模块也会自动导入。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-创建applicationContext-xml文件并加入头信息"><a href="#2-2-创建applicationContext-xml文件并加入头信息" class="headerlink" title="2.2 创建applicationContext.xml文件并加入头信息"></a>2.2 创建applicationContext.xml文件并加入头信息</h3><p>​    在resources下创建spring的主配置文件，添加头信息时需格外注意。最好保存模板或到官网复制粘贴，稍有差错将导致异常。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span>&gt;</span>...<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.主配置文件中导入模块配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"user.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-在配置文件中装配Bean并加载配置文件获取Bean"><a href="#2-3-在配置文件中装配Bean并加载配置文件获取Bean" class="headerlink" title="2.3 在配置文件中装配Bean并加载配置文件获取Bean"></a>2.3 在配置文件中装配Bean并加载配置文件获取Bean</h3><p>​    可以按分模块在配置文件中装配Bean，再在主配置文件中进行导入。但要注意，如果出现id相同的情况，后加载的配置会覆盖掉前面的配置！</p><h6 id="加载配置文件获取Bean"><a href="#加载配置文件获取Bean" class="headerlink" title="加载配置文件获取Bean"></a>加载配置文件获取Bean</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext appContext = <span class="keyword">new</span> </span><br><span class="line">    ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">UserDao userDao = appContext.getBean(<span class="string">"userDao"</span>, UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>Tips:</strong> Spring有自己的容器，需要读取配置文件装配好Bean后放入自己的容器，我们在用时直接找容器获取即可！如果分模块配置了但没有在主文件中导入其他文件也可以在加载配置文件时一块加载：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext appContext = <span class="keyword">new</span> </span><br><span class="line">    ClassPathXmlApplicationContext(<span class="keyword">new</span> String[] &#123;<span class="string">"applicationContext.xml"</span>,<span class="string">"user.xml"</span>&#125;);</span><br></pre></td></tr></table></figure><h1 id="3-IOC配置（Bean的装配方式）"><a href="#3-IOC配置（Bean的装配方式）" class="headerlink" title="3. IOC配置（Bean的装配方式）"></a>3. IOC配置（Bean的装配方式）</h1><p>​    Spring的一大特点是最小侵入性编程，它不会强迫我们去实现它的接口或实现类，POJO依旧是那个POJO。我们只是将依赖交由Spring管理，因此，IOC配置也就是Bean的装配便是很大一部分工作。Spring为我们提供了三种装配Bean的方式：</p><ul><li>基于xml配置文件        ★★★★</li><li>基于注解（往往配合xml配置文件使用）      ★★★★</li><li>基于java类的配置(会用到注解）</li></ul><p><strong>其实，无论使用哪一种方式，我们的目的只有一个，那就是我们要将程序中的依赖关系描述清楚，将Bean装配好交由Spring的容器！</strong></p><h3 id="3-1-基于xml文件的装配"><a href="#3-1-基于xml文件的装配" class="headerlink" title="3.1 基于xml文件的装配"></a>3.1 基于xml文件的装配</h3><h5 id="bean的实例化"><a href="#bean的实例化" class="headerlink" title="bean的实例化"></a>bean的实例化</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 0.通过默认构造方法生产bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.dintalk.dao.impl.UserDaoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1.通过实例工厂生产bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myBeanFactory"</span> <span class="attr">class</span>=<span class="string">"cn.dintalk.factory.BeanFactory1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myBean"</span> <span class="attr">factory-bean</span>=<span class="string">"myBeanFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getBean"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2.通过静态工厂生产bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao1"</span> <span class="attr">class</span>=<span class="string">"cn.dintalk.factory.BeanFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getBean"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- bean的存活范围及生命周期方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao2"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span> <span class="attr">init-method</span>=<span class="string">"m1"</span> <span class="attr">destroy-method</span>=<span class="string">"m2"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"cn.dintalk.dao.impl.UserDaoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="Tips-scope可选值："><a href="#Tips-scope可选值：" class="headerlink" title="Tips: scope可选值："></a><strong>Tips:</strong> scope可选值：</h6><ul><li><p>singleton</p></li><li><p>prototype</p></li><li><p>request</p></li><li><p>session</p></li><li><p>globalsession</p><p>生命周期方法在单例模式下才有意义，想想是为什么呢？</p></li></ul><h5 id="数据的注入"><a href="#数据的注入" class="headerlink" title="数据的注入"></a>数据的注入</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 3.数据的注入 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3.1构造方法注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"cn.dintalk.domain.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"王舞"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"wangwu"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3.2setter属性注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user1"</span> <span class="attr">class</span>=<span class="string">"cn.dintalk.domain.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"赵思"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"zhaosi"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3.3p命名空间注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user2"</span> <span class="attr">class</span>=<span class="string">"cn.dintalk.domain.User"</span> <span class="attr">p:name</span>=<span class="string">"张珊"</span> <span class="attr">p:password</span>=<span class="string">"zhangshan"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 4.常用数据类型的注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user3"</span> <span class="attr">class</span>=<span class="string">"cn.dintalk.domain.User"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 4.0数组的注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myArr"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>str1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>str2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 4.1List的注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myList"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>str1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>str2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 4.2Set的注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mySet"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>str1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>str2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 4.3Map的注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myMap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"s1"</span> <span class="attr">value</span>=<span class="string">"str1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"s2"</span> <span class="attr">value</span>=<span class="string">"str2"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 4.4Properties的注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myPro"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"s1"</span>&gt;</span>str1<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"s2"</span>&gt;</span>str2<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 5.依赖的注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"cn.dintalk.service.impl.UserServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-基于注解的装配"><a href="#3-2-基于注解的装配" class="headerlink" title="3.2 基于注解的装配"></a>3.2 基于注解的装配</h3><p>​    使用注解来装配bean可以简化我们的步骤，提高效率。可以替代xml文件的装配方式，但是一般是和xml文件的方式打双打。使用第三方工具包时使用xml的方式要方便一些，章节末我们通过DButil的示例。由于xml的方式比较好理解，而注解又是xml文件方式的简化，因此我们对比着来学习。</p><h5 id="ean的实例化"><a href="#ean的实例化" class="headerlink" title="ean的实例化"></a>ean的实例化</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span></span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">- @Controller      用在表现层</span></span><br><span class="line"><span class="comment">- @Service  用在业务层</span></span><br><span class="line"><span class="comment">- @Respository  用在持久层</span></span><br><span class="line"><span class="comment">这三个注解的作用和@Component完全一样，就是更加语义化（分层）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// bean的存活范围和生命周期</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="meta">@Scope</span>(<span class="string">"singleton"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"><span class="comment">// 初始化方法</span></span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// 销毁方法  </span></span><br><span class="line"><span class="meta">@PreDestroy</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br></pre></td></tr></table></figure><h5 id="数据的注入-1"><a href="#数据的注入-1" class="headerlink" title="数据的注入"></a>数据的注入</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"accountDao"</span>)</span><br><span class="line"><span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">- @Autowired   自动装配，查找Spring容器按照类型自动赋予对象。★★★    </span></span><br><span class="line"><span class="comment">- @Qualifier("accountDao") 与@Autowired配合，指定具体名称的实现类对象。★★★ </span></span><br><span class="line"><span class="comment">- @Resource(name="accountDao") Spring对JSR-250中定义的注解的支持。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// - @Value 注入简单类型的数据</span></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"16"</span>)    <span class="comment">// 值都是字符串类型，spring会自行解析</span></span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"张珊"</span>)</span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure><p>基于注解的简单类型（基本类型+String）数据注入意义不是很大，都在源码里面，和直接赋值区别不大。</p><h5 id="基于注解的配置加载（获取容器对象）"><a href="#基于注解的配置加载（获取容器对象）" class="headerlink" title="基于注解的配置加载（获取容器对象）"></a>基于注解的配置加载（获取容器对象）</h5><p>方式一：依旧使用ClassPathXmlApplicationContext（需配置）★★★</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置文件中，指定扫描注解的包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.dintalk"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>方式二：使用AnnotationConfigApplicationContext加载配置，获取bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> </span><br><span class="line">    AnnotationConfigApplicationContext(MyBean<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"> MyBean myBean = context.getBean(<span class="string">"myBean"</span>, MyBean<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>Tips:</strong>  我一般使用方式一的配置，但是要注意不要引错了头约束。</p><h3 id="3-3-基于java类的装配"><a href="#3-3-基于java类的装配" class="headerlink" title="3.3 基于java类的装配"></a>3.3 基于java类的装配</h3><p>​    基于注解的通过组件扫描和自动装配实现Spring的自动化配置是更为推荐的方式，但有时候自动化配置的方案行不通，因此需要明确配置Spring。同样比如，我们想将第三方库中的组件装配到我们的应用中，这种情况下，没有办法在它的类上添加@Component和@Autowired注解的。因此我们必须采用显示装配的方式，显示装配有两种可选方案：上述的xml装配方式和我们即将阐述的Java类的装配方式。还是那一句话，无论是哪一种方式，目的只有一个，那就是将一些必要的信息告知我们的程序。</p><h5 id="bean的实例化-1"><a href="#bean的实例化-1" class="headerlink" title="bean的实例化"></a>bean的实例化</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>   <span class="comment">//Spring配置类，带有Configuratio注解就是配置类.加不加无所谓</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"cn.dintalk"</span>)  <span class="comment">//&lt;context:component-scan base-package="cn.dintalk"/&gt;</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;JdbcConfig<span class="class">.<span class="keyword">class</span>,<span class="title">MailConfig</span>.<span class="title">class</span>&#125;)  //聚合多个配置类&lt;<span class="title">import</span> <span class="title">resource</span></span>=<span class="string">""</span>/&gt;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@Configuration可不加：因为我们在加载配置时还会指定到该类</span></span><br><span class="line"><span class="comment">    - ApplicationContext applicationContext =</span></span><br><span class="line"><span class="comment">                new AnnotationConfigApplicationContext(SpringConfig.class);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"jdbc.properties"</span>)<span class="comment">//导入外部的properties文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//读取properties文件中key对应的value值</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.driverClassName&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String driverClassName;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.url&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.username&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.password&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">//创建数据源</span></span><br><span class="line">    <span class="comment">//告知spring容器，将该方法的返回值对象，以“druidDataSource”存放到容器中</span></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"druidDataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">createDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setDriverClassName(driverClassName);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建QueryRunner对象，并交给spring容器管理</span></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"queryRunner"</span>)</span><br><span class="line">    <span class="comment">//@Qualifier("druidDataSource") DataSource dataSource:</span></span><br><span class="line">    <span class="comment">//数据源对象对应spring容器中一个名字叫做druidDataSource的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> QueryRunner <span class="title">createQueryRunner</span><span class="params">(@Qualifier(<span class="string">"druidDataSource"</span>)</span> </span></span><br><span class="line"><span class="function">                                         DataSource dataSource)</span>&#123;</span><br><span class="line">        QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner(dataSource);</span><br><span class="line">        <span class="keyword">return</span> queryRunner;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="数据的注入-2"><a href="#数据的注入-2" class="headerlink" title="数据的注入"></a>数据的注入</h5><p>参考同基于注解的装配</p><h5 id="基于java类的配置加载"><a href="#基于java类的配置加载" class="headerlink" title="基于java类的配置加载"></a>基于java类的配置加载</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//AnnotationConfigApplicationContext构造参数：指定配置类的类型</span></span><br><span class="line"><span class="comment">//可以指定多个</span></span><br><span class="line">ApplicationContext applicationContext =</span><br><span class="line">        <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">UserService userService = applicationContext.getBean(<span class="string">"userService"</span>, UserService<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><h1 id="4-DBUtils的使用"><a href="#4-DBUtils的使用" class="headerlink" title="4. DBUtils的使用"></a>4. DBUtils的使用</h1><p>​    DBUtils是Apache提供的对JDBC封装了的公共组件。</p><h3 id="4-1-普通的使用"><a href="#4-1-普通的使用" class="headerlink" title="4.1 普通的使用"></a>4.1 普通的使用</h3><h5 id="第一步：导入jar包或Maven坐标"><a href="#第一步：导入jar包或Maven坐标" class="headerlink" title="第一步：导入jar包或Maven坐标"></a>第一步：导入jar包或Maven坐标</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.46<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="第二步：创建工具类"><a href="#第二步：创建工具类" class="headerlink" title="第二步：创建工具类"></a>第二步：创建工具类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream = DruidUtil<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span></span><br><span class="line">                    .getResourceAsStream("jdbc.properties");</span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            properties.load(inputStream);</span><br><span class="line">            dataSource = DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"加载数据库配置文件失败！"</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (inputStream != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"关闭文件资源失败!"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123; <span class="comment">// 获取数据源</span></span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123; <span class="comment">// 获取连接</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="第三步：CRUD操作-DAO层"><a href="#第三步：CRUD操作-DAO层" class="headerlink" title="第三步：CRUD操作(DAO层)"></a>第三步：CRUD操作(DAO层)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner(DruidUtil.getDataSource());</span><br><span class="line"><span class="comment">// 增删改： 使用update（sql,params）;</span></span><br><span class="line"><span class="comment">//update方法内部：先从给定的数据源获取一个连接，在方法即将执行完毕后，将连接归还(到连接池)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (account == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"参数错误"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            queryRunner.update(<span class="string">"insert into accounts values(null,?,?)"</span>,</span><br><span class="line">                    account.getAccountName(), account.getBalance());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//查询：使用 query(sql,Handler,params)</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Account <span class="title">findById</span><span class="params">(Integer aid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (aid == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"参数异常"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> queryRunner.query(<span class="string">"select * from accounts where aid = ?"</span>, <span class="keyword">new</span></span><br><span class="line">                    BeanHandler&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>), <span class="title">aid</span>)</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-使用Spring基于xml进行解耦"><a href="#4-2-使用Spring基于xml进行解耦" class="headerlink" title="4.2 使用Spring基于xml进行解耦"></a>4.2 使用Spring基于xml进行解耦</h3><h5 id="第一步：导入Spring的jar包或Maven坐标"><a href="#第一步：导入Spring的jar包或Maven坐标" class="headerlink" title="第一步：导入Spring的jar包或Maven坐标"></a>第一步：导入Spring的jar包或Maven坐标</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="第二步：创建applicationContext-xml文件并进行配置"><a href="#第二步：创建applicationContext-xml文件并进行配置" class="headerlink" title="第二步：创建applicationContext.xml文件并进行配置"></a>第二步：创建applicationContext.xml文件并进行配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.配置druid数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"druidDataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///spring02"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"sh"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"sh123"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2.配置QueryRunner --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"queryRunner"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbutils.QueryRunner"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"druidDataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3.配置AccountDao --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"cn.dintalk.dao.impl.AccountDaoImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"queryRunner"</span> <span class="attr">ref</span>=<span class="string">"queryRunner"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 4.配置AccountService --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"cn.dintalk.service.impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountDao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="第三步：CRUD操作"><a href="#第三步：CRUD操作" class="headerlink" title="第三步：CRUD操作"></a>第三步：CRUD操作</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DAO层 提供set方法以注入</span></span><br><span class="line"><span class="keyword">private</span> QueryRunner queryRunner;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setQueryRunner</span><span class="params">(QueryRunner queryRunner)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.queryRunner = queryRunner;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//service层 提供set方法以注入</span></span><br><span class="line"><span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(AccountDao accountDao)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//CRUD操作同上</span></span><br></pre></td></tr></table></figure><p><strong>Tips:</strong>  配置加载方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext appContext = <span class="keyword">new</span> </span><br><span class="line">    ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br></pre></td></tr></table></figure><h3 id="4-3-使用Spring基于注解进行解耦"><a href="#4-3-使用Spring基于注解进行解耦" class="headerlink" title="4.3 使用Spring基于注解进行解耦"></a>4.3 使用Spring基于注解进行解耦</h3><p>由于使用到第三方包，所以无法全部使用注解，需要和xml的方式结合。</p><h5 id="第一步：配置applicationContext文件"><a href="#第一步：配置applicationContext文件" class="headerlink" title="第一步：配置applicationContext文件"></a>第一步：配置applicationContext文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.基于注解,声明扫描注解的包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.dintalk"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2.配置druid数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"druidDataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///spring02"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"sh"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"sh123"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3.配置QueryRunner --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"queryRunner"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbutils.QueryRunner"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"druidDataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="第二步：添加注解"><a href="#第二步：添加注解" class="headerlink" title="第二步：添加注解"></a>第二步：添加注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DAO层中</span></span><br><span class="line"><span class="meta">@Repository</span>(<span class="string">"accountDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QueryRunner queryRunner;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// Service层中</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"accountDao"</span>)</span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br></pre></td></tr></table></figure><h5 id="第三步：CRUD操作参上"><a href="#第三步：CRUD操作参上" class="headerlink" title="第三步：CRUD操作参上"></a>第三步：CRUD操作参上</h5><p><strong>Tips:</strong>  配置加载方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext appContext = <span class="keyword">new</span> </span><br><span class="line">    ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br></pre></td></tr></table></figure><h3 id="4-4-使用Spring基于Java类进行解耦"><a href="#4-4-使用Spring基于Java类进行解耦" class="headerlink" title="4.4 使用Spring基于Java类进行解耦"></a>4.4 使用Spring基于Java类进行解耦</h3><h5 id="第一步：创建配置类"><a href="#第一步：创建配置类" class="headerlink" title="第一步：创建配置类"></a>第一步：创建配置类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"jdbc.properties"</span>)<span class="comment">//导入外部的properties文件</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"cn.dintalk"</span>)  <span class="comment">// 添加注解扫描包</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//读取properties文件中key对应的value值</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.driverClassName&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String driverClassName;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.url&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.username&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.password&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">//创建数据源</span></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"druidDataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">createDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setDriverClassName(driverClassName);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建QueryRunner对象，并交给spring容器管理</span></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"queryRunner"</span>)</span><br><span class="line">    <span class="comment">//@Qualifier("druidDataSource") DataSource dataSource:</span></span><br><span class="line">    数据源对象对应spring容器中一个名字叫做druidDataSource的</span><br><span class="line">    <span class="function"><span class="keyword">public</span> QueryRunner <span class="title">createQueryRunner</span><span class="params">(@Qualifier(<span class="string">"druidDataSource"</span>)</span> </span></span><br><span class="line"><span class="function">                                         DataSource dataSource)</span>&#123;</span><br><span class="line">        QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner(dataSource);</span><br><span class="line">        <span class="keyword">return</span> queryRunner;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="第二步：添加注解-1"><a href="#第二步：添加注解-1" class="headerlink" title="第二步：添加注解"></a>第二步：添加注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DAO层中</span></span><br><span class="line"><span class="meta">@Repository</span>(<span class="string">"accountDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QueryRunner queryRunner;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// Service层中</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"accountDao"</span>)</span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br></pre></td></tr></table></figure><h5 id="第三步：CRUD参上"><a href="#第三步：CRUD参上" class="headerlink" title="第三步：CRUD参上"></a>第三步：CRUD参上</h5><p><strong>Tips:</strong>  配置加载方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> </span><br><span class="line">    AnnotationConfigApplicationContext(SpringConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><h1 id="V-附录：常用文件约束头"><a href="#V-附录：常用文件约束头" class="headerlink" title="V.附录：常用文件约束头"></a>V.附录：常用文件约束头</h1><h5 id="applicationContext-xml文件头约束"><a href="#applicationContext-xml文件头约束" class="headerlink" title="applicationContext.xml文件头约束"></a>applicationContext.xml文件头约束</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="带有p命名空间的约束头"><a href="#带有p命名空间的约束头" class="headerlink" title="带有p命名空间的约束头"></a>带有p命名空间的约束头</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="带有context命名空间的约束头"><a href="#带有context命名空间的约束头" class="headerlink" title="带有context命名空间的约束头"></a>带有context命名空间的约束头</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;​    作为一个Java人，想必都或多或少的了解过Spring。对于其优势也能道个一二，诸如方便解耦、支持AOP编程、支持声明式事务、方便测试等等。Spring也不仅仅局限于服务器端开发，它可以做非常多的事情，任何Java应用都可以在简单性、可测试性和松耦合等方面从Spring中受益。Spring丰富功能的底层都依赖于它的两个核心特性&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://songhui.club/source/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://songhui.club/source/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring -- 春风拂面之 核心 AOP</title>
    <link href="http://songhui.club/Spring/2020/Spring-Aop.html"/>
    <id>http://songhui.club/Spring/2020/Spring-Aop.html</id>
    <published>2020-01-18T07:50:05.000Z</published>
    <updated>2020-01-18T07:54:20.659Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>​    ”万物皆对象“是面向对象编程思想OOP（Object Oriented Programming） 的最高境界。在面向对象中，我一直将自己（开发者）放在一个至高无上的位置上，可以操纵万物（对象），犹如一军统帅。那现在有一个问题，我的士兵除了作战之外还要吃饭，显然不可能让每一个士兵自己去解决吃饭问题。因此，军中有后勤部门，专门解决士兵作战之外的衣食等问题。简单的说，这就是一个切面问题，也就是我们今天讨论的重点<strong>面向切面编程</strong>AOP(Aspect Oriented Programming )。</p><a id="more"></a><h1 id="1-关于AOP的理解"><a href="#1-关于AOP的理解" class="headerlink" title="1. 关于AOP的理解"></a>1. 关于AOP的理解</h1><p>​    面向切面编程是一直流行在学术领域的编程思想，近几年在应用领域流行起来。AOP是对OOP的一个有益的补充，它关注具有横切逻辑的代码。简而言之，横切关注点可以被描述为影响应用多处的功能。例如：事务管理、日志记录、安全等等，应用中的很多方法都会涉及到这些。</p><p>​    在使用面向切面编程时，我们在一个地方定义通用功能，但是可以通过声明的方式定义这个功能要以何种方式在何处应用，而无需修改受影响的类。横切关注点可以被模块化为特殊的类，这些类被称为切面（aspect）。而我把它理解为像“抽屉’’一样的插片，哪里需要插到哪里。如此，服务模块只包含核心功能，更加简洁，而次要关注点的代码被转移到切面中了（还可复用）。</p><p>​    因此，AOP是一种思想，而并非Spring独有的功能。Spring只支持方法级别的连接点，因为Spring基于动态代理，通过在代理类中包裹切面，在运行期把切面织入到Spring管理的bean中。代理类封装了目标类，并拦截被通知方法的调用，再把调用转发给真正的目标bean。当代理拦截到方法调用时，在调用目标bean方法之前，会执行切面逻辑。我们以转账业务中的事务控制为例剖析。</p><h1 id="2-转账–事务控制"><a href="#2-转账–事务控制" class="headerlink" title="2. 转账–事务控制"></a>2. 转账–事务控制</h1><h5 id="需求：A、B两个账户之间进行转账，基于MVC进行编程。DAO层只负责CRUD，Service层负责业务逻辑处理（避免出现属于DAO层的依赖）。未控制事务时代码如下："><a href="#需求：A、B两个账户之间进行转账，基于MVC进行编程。DAO层只负责CRUD，Service层负责业务逻辑处理（避免出现属于DAO层的依赖）。未控制事务时代码如下：" class="headerlink" title="需求：A、B两个账户之间进行转账，基于MVC进行编程。DAO层只负责CRUD，Service层负责业务逻辑处理（避免出现属于DAO层的依赖）。未控制事务时代码如下："></a>需求：A、B两个账户之间进行转账，基于MVC进行编程。DAO层只负责CRUD，Service层负责业务逻辑处理（避免出现属于DAO层的依赖）。未控制事务时代码如下：</h5><h5 id="Dao层关键代码"><a href="#Dao层关键代码" class="headerlink" title="Dao层关键代码"></a>Dao层关键代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner(DruidUtil.getDataSource());</span><br><span class="line"><span class="comment">//1 查找账户信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">findAccountByAccountName</span><span class="params">(String accountName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> queryRunner.query(<span class="string">"select * from accounts where accountName = ?"</span>,</span><br><span class="line">         <span class="keyword">new</span> BeanHandler&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>), <span class="title">accountName</span>)</span>;     </span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//2.更新账户信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">   queryRunner.update(<span class="string">"update accounts set balance=? where accountName=? "</span>,</span><br><span class="line">      account.getBalance(),account.getAccountName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Service层关键代码"><a href="#Service层关键代码" class="headerlink" title="Service层关键代码"></a>Service层关键代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> AccountDao accountDao = <span class="keyword">new</span> AccountDaoImpl();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceAccount, String targetAccount, Float money)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//1.查询到相关账户并进行业务处理</span></span><br><span class="line">  Account sourAccout = accountDao.findAccountByAccountName(sourceAccount);</span><br><span class="line">  Account targAccount = accountDao.findAccountByAccountName(targetAccount);</span><br><span class="line">  sourAccout.setBalance(sourAccout.getBalance()-money);</span><br><span class="line">  targAccount.setBalance(targAccount.getBalance()+money);</span><br><span class="line">  <span class="comment">//2.更新账户信息</span></span><br><span class="line">  accountDao.updateAccount(sourAccout);</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;  <span class="comment">// 若出现异常，则发生事务问题</span></span><br><span class="line">  accountDao.updateAccount(targAccount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-1-使用TransactionManager优化"><a href="#2-1-使用TransactionManager优化" class="headerlink" title="2.1 使用TransactionManager优化"></a>2.1 使用TransactionManager优化</h2><h5 id="第一步：编写事务管理器"><a href="#第一步：编写事务管理器" class="headerlink" title="第一步：编写事务管理器"></a>第一步：编写事务管理器</h5><p><strong>Tips:</strong> 使用TreadLocal进行线程绑定，实现在业务处理中使用同一个连接（即在同一个事务下）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionMannager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Connection&gt; local=<span class="keyword">new</span> ThreadLocal&lt;Connection&gt;();</span><br><span class="line"><span class="comment">//1. 获取连接的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection connection = local.get();</span><br><span class="line">        <span class="keyword">if</span> (connection == <span class="keyword">null</span>) &#123;</span><br><span class="line">            connection = DruidUtil.getConnection();</span><br><span class="line">            local.set(connection);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2. 给TreadLocal绑定连接,开启事务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Connection connection = getConnection();</span><br><span class="line">            connection.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"开启事务失败!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3. 提交</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            local.get().commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4. 回滚</span></span><br><span class="line">...</span><br><span class="line">    <span class="comment">//5. 关闭连接,移除绑定（避免下次获取到已经关闭的连接）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            local.get().close();</span><br><span class="line">            local.remove();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="第二步：使用事务管理器优化"><a href="#第二步：使用事务管理器优化" class="headerlink" title="第二步：使用事务管理器优化"></a>第二步：使用事务管理器优化</h5><h6 id="Dao层关键代码-1"><a href="#Dao层关键代码-1" class="headerlink" title="Dao层关键代码"></a>Dao层关键代码</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner(DruidUtil.getDataSource());</span><br><span class="line"><span class="comment">//1 查找账户信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">findAccountByAccountName</span><span class="params">(String accountName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> queryRunner.query(TransactionMannager.getConnection(),</span><br><span class="line">              <span class="string">"select * from accounts where accountName = ?"</span>,</span><br><span class="line">         <span class="keyword">new</span> BeanHandler&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>), <span class="title">accountName</span>)</span>;     </span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//2.更新账户信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">   queryRunner.update(TransactionMannager.getConnection(),</span><br><span class="line">      <span class="string">"update accounts set balance=? where accountName=? "</span>,</span><br><span class="line">      account.getBalance(),account.getAccountName());</span><br></pre></td></tr></table></figure><h6 id="Service层关键代码-1"><a href="#Service层关键代码-1" class="headerlink" title="Service层关键代码"></a>Service层关键代码</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao = <span class="keyword">new</span> AccountDaoImpl();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceAccount, String targetAccount, Float money)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.查询到账户进行业务处理</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TransactionMannager.startTransaction();<span class="comment">//开启事务</span></span><br><span class="line">            Account sourAccout = accountDao.findAccountByAccountName(sourceAccount);</span><br><span class="line">            Account targAccount = accountDao.findAccountByAccountName(targetAccount);</span><br><span class="line">            sourAccout.setBalance(sourAccout.getBalance()-money);</span><br><span class="line">            targAccount.setBalance(targAccount.getBalance()+money);</span><br><span class="line">            <span class="comment">//2.更新账户</span></span><br><span class="line">            accountDao.updateAccount(sourAccout);</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">            accountDao.updateAccount(targAccount);</span><br><span class="line">            TransactionMannager.commit();<span class="comment">//提交事务</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            TransactionMannager.rollBack();<span class="comment">//回滚事务</span></span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            TransactionMannager.close();<span class="comment">//关闭连接</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-基于静态代理优化"><a href="#2-2-基于静态代理优化" class="headerlink" title="2.2 基于静态代理优化"></a>2.2 基于静态代理优化</h2><h5 id="第一步：编写静态代理类"><a href="#第一步：编写静态代理类" class="headerlink" title="第一步：编写静态代理类"></a>第一步：编写静态代理类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImplProxy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountServiceImplProxy</span><span class="params">(AccountService accountService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountService = accountService;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 1.方法增强</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceAccountName, String targetAccountName,Float money)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TransactionMannager.startTransaction();<span class="comment">//开启事务</span></span><br><span class="line">            accountService.transfer(sourceAccountName,targetAccountName,money);</span><br><span class="line">            TransactionMannager.commit();<span class="comment">//提交事务</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            TransactionMannager.rollBack();<span class="comment">//回滚事务</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            TransactionMannager.close();<span class="comment">//关闭连接</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h5><p>​    与使用TransactionManager进行事务管理基本一致，只不过事务控制的代码不写在Service层中，而写在其代理类中，代理类的唯一构造方法需要传入accountService对象。在代理类中对accountService的方法进行增强（添加事务控制）。</p><h2 id="2-3-基于动态代理优化"><a href="#2-3-基于动态代理优化" class="headerlink" title="2.3 基于动态代理优化"></a>2.3 基于动态代理优化</h2><h5 id="第一步：编写动态代理"><a href="#第一步：编写动态代理" class="headerlink" title="第一步：编写动态代理"></a>第一步：编写动态代理</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 Jdk的Proxy 动态代理</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTransfer1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//创建被代理对象</span></span><br><span class="line">    AccountService accountService = <span class="keyword">new</span> AccountServiceImpl();</span><br><span class="line">    <span class="comment">//创建代理</span></span><br><span class="line">    AccountService proxy =(AccountService) Proxy.newProxyInstance(AccountTest<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>(),</span></span><br><span class="line"><span class="class">    <span class="title">accountService</span>.<span class="title">getClass</span>().<span class="title">getInterfaces</span>(),<span class="title">new</span> <span class="title">MyInvocationHandler</span>(<span class="title">accountService</span>))</span>;</span><br><span class="line">    proxy.transfer(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="number">1f</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Proxy 动态代理类的处理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AccountService accountService; <span class="comment">//构造方法需要传入被代理对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyInvocationHandler</span><span class="params">(AccountService accountService)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountService = accountService;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TransactionMannager.startTransaction();</span><br><span class="line">            Object rtValue= method.invoke(accountService,args);</span><br><span class="line">            TransactionMannager.commit();</span><br><span class="line">            System.out.println(<span class="string">"proxy动态代理执行了"</span>);</span><br><span class="line">            <span class="keyword">return</span> rtValue;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            TransactionMannager.rollBack();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            TransactionMannager.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-------------------------------------</span></span><br><span class="line"><span class="comment">// 使用Cg-lib 的动态代理</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTransfer2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    AccountServiceImpl accountService = <span class="keyword">new</span> AccountServiceImpl();</span><br><span class="line">    Enhancer proxy = <span class="keyword">new</span> Enhancer();</span><br><span class="line">    proxy.setSuperclass(AccountServiceImpl<span class="class">.<span class="keyword">class</span>)</span>;<span class="comment">//指定父类的类型</span></span><br><span class="line">    proxy.setCallback(<span class="keyword">new</span> MyInvocationHandler1(accountService));<span class="comment">//增强策略</span></span><br><span class="line">    AccountServiceImpl pro = (AccountServiceImpl) proxy.create();</span><br><span class="line">    pro.transfer(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="number">2f</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// cglib 的动态代理处理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler1</span> <span class="keyword">implements</span> <span class="title">net</span>.<span class="title">sf</span>.<span class="title">cglib</span>.<span class="title">proxy</span>.<span class="title">InvocationHandler</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AccountServiceImpl accountService;<span class="comment">//构造方法需要传入被代理对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyInvocationHandler1</span><span class="params">(AccountServiceImpl accountService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountService = accountService;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TransactionMannager.startTransaction();</span><br><span class="line">            Object rtValue = method.invoke(accountService,args);</span><br><span class="line">            TransactionMannager.commit();</span><br><span class="line">            System.out.println(<span class="string">"cglib动态代理执行了"</span>);</span><br><span class="line">            <span class="keyword">return</span> rtValue;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            TransactionMannager.rollBack();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            TransactionMannager.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h5><p>​    Proxy代理通过实现和被增强类同样的接口，如果目标没有实现任何的接口，Proxy将无法使用。Cglib是基于子类的动态代理，生成的代理类是被代理类的子类。在spring中，框架会根据目标类是否实现了接口来决定采用哪种动态代理的方式。</p><ul><li>Proxy 编译时间短，运行效率低。</li><li>Cglib 编译时间长，运行效率高。</li></ul><h1 id="3-Spring-AOP及使用配置"><a href="#3-Spring-AOP及使用配置" class="headerlink" title="3. Spring AOP及使用配置"></a>3. Spring AOP及使用配置</h1><h2 id="3-1-AOP相关术语"><a href="#3-1-AOP相关术语" class="headerlink" title="3.1 AOP相关术语"></a>3.1 AOP相关术语</h2><h5 id="Joinpoint（连接点）："><a href="#Joinpoint（连接点）：" class="headerlink" title="Joinpoint（连接点）："></a>Joinpoint（连接点）：</h5><p>​    指那些被拦截到的点，在spring中，这些点指的是方法，因为spring只支持方法类型的连接点。</p><h5 id="Pointcut（切入点）："><a href="#Pointcut（切入点）：" class="headerlink" title="Pointcut（切入点）："></a>Pointcut（切入点）：</h5><p>​    指我们要对哪些 Joinpoint进行拦截的定义。</p><h5 id="Advice（通知-增强）："><a href="#Advice（通知-增强）：" class="headerlink" title="Advice（通知/增强）："></a>Advice（通知/增强）：</h5><p>​    指拦截到 Joinpoint之后要做的事情就是通知。通知的类型有：前置通知，后置通知，异常通知</p><p>​    最终通知，环绕通知。</p><h5 id="Introduction（引介）："><a href="#Introduction（引介）：" class="headerlink" title="Introduction（引介）："></a>Introduction（引介）：</h5><p>​    引介是一种特殊的通知，在不修改类代码的前提下，Introduction可以在运行期为类动态地添加</p><p>​    一些方法或Field。    </p><h5 id="Target（目标对象）："><a href="#Target（目标对象）：" class="headerlink" title="Target（目标对象）："></a>Target（目标对象）：</h5><p>​    代理的目标对象。</p><h5 id="Weaving（织入）："><a href="#Weaving（织入）：" class="headerlink" title="Weaving（织入）："></a>Weaving（织入）：</h5><p>​    指把增强应用到目标对象来创建新的代理对象的过程。（spring采用动态代理织入，而AspectJ</p><p>​    采用编译期织入和类装载期织入。</p><h5 id="Proxy（代理）："><a href="#Proxy（代理）：" class="headerlink" title="Proxy（代理）："></a>Proxy（代理）：</h5><p>​    一个类被AOP织入增强后，就产生一个结果代理类。</p><h5 id="Aspect（切面）："><a href="#Aspect（切面）：" class="headerlink" title="Aspect（切面）："></a>Aspect（切面）：</h5><p>​    是切入点和通知（引介）的结合。</p><h2 id="3-2-准备必要代码"><a href="#3-2-准备必要代码" class="headerlink" title="3.2 准备必要代码"></a>3.2 准备必要代码</h2><h5 id="编写需要加入切面的类"><a href="#编写需要加入切面的类" class="headerlink" title="编写需要加入切面的类"></a>编写需要加入切面的类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"用户的登录方法执行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"用户的查找方法执行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="编写advice通知类（公用的增强代码）"><a href="#编写advice通知类（公用的增强代码）" class="headerlink" title="编写advice通知类（公用的增强代码）"></a>编写advice通知类（公用的增强代码）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//class Logger</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printLogger</span><span class="params">()</span></span>&#123;</span><br><span class="line">   System.out.println(<span class="string">"logger中的printLogger方法执行了"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPrintLogger</span><span class="params">()</span></span>&#123;</span><br><span class="line">   System.out.println(<span class="string">"logger中的afgerPrintLogger方法执行了"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-基于xml的Spring-AOP-★★★"><a href="#3-3-基于xml的Spring-AOP-★★★" class="headerlink" title="3.3 基于xml的Spring AOP  ★★★"></a>3.3 基于xml的Spring AOP  ★★★</h2><h5 id="第一步：导入jar包或Maven坐标"><a href="#第一步：导入jar包或Maven坐标" class="headerlink" title="第一步：导入jar包或Maven坐标"></a>第一步：导入jar包或Maven坐标</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="第二步：配置applicationContext-xml文件"><a href="#第二步：配置applicationContext-xml文件" class="headerlink" title="第二步：配置applicationContext.xml文件"></a>第二步：配置applicationContext.xml文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 基于xml文件的aop --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">aop 的配置步骤：</span></span><br><span class="line"><span class="comment">第一步：把通知类的创建也交给 spring 来管理</span></span><br><span class="line"><span class="comment">第二步：使用 aop:config 标签开始 aop 的配置</span></span><br><span class="line"><span class="comment">第三步：使用 aop:aspect 标签开始配置切面，写在 aop:config 标签内部</span></span><br><span class="line"><span class="comment">id 属性：给切面提供一个唯一标识</span></span><br><span class="line"><span class="comment">ref 属性：用于引用通知 bean 的 id。</span></span><br><span class="line"><span class="comment">第四步：使用对应的标签在 aop:aspect 标签内部配置通知的类型</span></span><br><span class="line"><span class="comment">使用 aop:befored 标签配置前置通知，写在 aop:aspect 标签内部</span></span><br><span class="line"><span class="comment">method 属性：用于指定通知类中哪个方法是前置通知</span></span><br><span class="line"><span class="comment">pointcut 属性：用于指定切入点表达式。</span></span><br><span class="line"><span class="comment">切入点表达式写法：</span></span><br><span class="line"><span class="comment">关键字：execution(表达式) 表达式内容：全匹配标准写法：</span></span><br><span class="line"><span class="comment">访问修饰符 返回值 包名.包名.包名...类名.方法名(参数列表)</span></span><br><span class="line"><span class="comment">例如：</span></span><br><span class="line"><span class="comment">public void cn.dintalk.service.impl.AccountServiceImpl.saveAccount()</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1.配置bean 及logger通知类 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logger"</span> <span class="attr">class</span>=<span class="string">"cn.dintalk.Aop.Logger"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"cn.dintalk.Aop.service.impl.UserServiceImpl"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2.配置Aop --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span>  <span class="comment">&lt;!-- 注意顺序,顺序不对会报错 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.1配置切入点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"userServiceM"</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.dintalk.Aop.service.impl.UserServiceImpl.*(..))"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.2配置切面(增强类) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"loggerAdvice"</span> <span class="attr">ref</span>=<span class="string">"logger"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"printLogger"</span> <span class="attr">pointcut-ref</span>=<span class="string">"userServiceM"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"afterPrintLogger"</span> <span class="attr">pointcut-ref</span>=<span class="string">"userServiceM"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="总结：-2"><a href="#总结：-2" class="headerlink" title="总结："></a>总结：</h5><p>​    如此，调用userService的方法，在目标方法执行前后会执行相应的通知。</p><h5 id="切入点表达式说明："><a href="#切入点表达式说明：" class="headerlink" title="切入点表达式说明："></a>切入点表达式说明：</h5><ul><li>​     *   可表示任意返回值和任意包（单个包）或任意类及任意方法名</li><li>​     ..    可表示当前包及其子包  或参数</li></ul><p>通常情况下，我们都是对业务层的代码进行增强，所以切入点表达式都是切到业务层实现类：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(* cn.dintalk.service.impl.*.*(..))</span><br></pre></td></tr></table></figure><h5 id="通知的常用类型"><a href="#通知的常用类型" class="headerlink" title="通知的常用类型"></a>通知的常用类型</h5><ul><li>aop:before</li><li>aop:after-returning     切入点方法正常执行后执行</li><li>aop:after-throwing      切入点方法异常后执行</li><li>aop:after</li></ul><h5 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h5><p>配置方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置环绕通知 --&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"transactionAround"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当配置完环绕通知之后，没有业务层方法执行（切入点方法执行）,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* spring 框架为我们提供了一个接口，该接口可以作为环绕通知的方法参数来使用</span></span><br><span class="line"><span class="comment">* ProceedingJoinPoint。当环绕通知执行时，spring 框架会为我们注入该接口的实现类。</span></span><br><span class="line"><span class="comment">* 它有一个方法 proceed()，就相当于 invoke，明确的业务层方法调用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aroundPrintLog</span><span class="params">(ProceedingJoinPoint pjp)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"前置 Logger 类中的 aroundPrintLog 方法开始记录日志了"</span>);</span><br><span class="line">pjp.proceed();<span class="comment">//明确的方法调用</span></span><br><span class="line">System.out.println(<span class="string">"后置 Logger 类中的 aroundPrintLog 方法开始记录日志了"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">System.out.println(<span class="string">"异常 Logger 类中的 aroundPrintLog 方法开始记录日志了"</span>);</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"最终 Logger 类中的 aroundPrintLog 方法开始记录日志了"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-基于注解的Spring-AOP"><a href="#3-4-基于注解的Spring-AOP" class="headerlink" title="3.4 基于注解的Spring AOP"></a>3.4 基于注解的Spring AOP</h2><h5 id="第一步：配置applicationContext-xml文件"><a href="#第一步：配置applicationContext-xml文件" class="headerlink" title="第一步：配置applicationContext.xml文件"></a>第一步：配置applicationContext.xml文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 基于注解的AOP：配置注解扫描包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.dintalk.Aop"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1.开启AOP对注解的支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure><h5 id="第二步：添加注解"><a href="#第二步：添加注解" class="headerlink" title="第二步：添加注解"></a>第二步：添加注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// userService实现类</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"userService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//切面类</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"logger"</span>)</span><br><span class="line"><span class="meta">@Aspect</span>    <span class="comment">// 声明为通知类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"execution(* cn.dintalk.Aop..*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printLogger</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"logger中的printLogger方法执行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用抽取出来的切入点表达式</span></span><br><span class="line">    <span class="meta">@AfterReturning</span>(<span class="string">"m1()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPrintLogger</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"logger中的afgerPrintLogger方法执行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* cn.dintalk.Aop..*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span></span>&#123; &#125; <span class="comment">// 方法无意义，抽取切入点表达式而已</span></span><br></pre></td></tr></table></figure><h2 id="3-5-基于类的Spring-AOP"><a href="#3-5-基于类的Spring-AOP" class="headerlink" title="3.5 基于类的Spring AOP"></a>3.5 基于类的Spring AOP</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"cn.dintalk.Aop"</span>)</span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span> <span class="comment">// 开启对注解的支持</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//基于类的注解 获取容器</span></span><br><span class="line">userService = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfig<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">.getBean("userService",UserService.class);</span><br><span class="line">userService.login();</span><br></pre></td></tr></table></figure><h1 id="附录：Spring整合Junit"><a href="#附录：Spring整合Junit" class="headerlink" title="附录：Spring整合Junit"></a>附录：Spring整合Junit</h1><p>在程序测试阶段，我们总是需要将加载Spring的配置获取容器，即诸如以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext applicationContext1 = <span class="keyword">new</span></span><br><span class="line">           ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">UserServiceImpl userService = </span><br><span class="line">    applicationContext1.getBean(<span class="string">"userService"</span>, UserServiceImpl<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><p>我们可以借助spring提供的运行器来读取配置文件或注解来创建容器。使用如下：</p><h5 id="第一步：导入spring整合Junit的坐标"><a href="#第一步：导入spring整合Junit的坐标" class="headerlink" title="第一步：导入spring整合Junit的坐标"></a>第一步：导入spring整合Junit的坐标</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="第二步：使用-RunWith注解替换原有运行器"><a href="#第二步：使用-RunWith注解替换原有运行器" class="headerlink" title="第二步：使用@RunWith注解替换原有运行器"></a>第二步：使用@RunWith注解替换原有运行器</h5><h5 id="第三步：使用-ContextConfiguration指定spring配置文件的位置"><a href="#第三步：使用-ContextConfiguration指定spring配置文件的位置" class="headerlink" title="第三步：使用@ContextConfiguration指定spring配置文件的位置"></a>第三步：使用@ContextConfiguration指定spring配置文件的位置</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAopTest</span> </span>&#123;</span><br></pre></td></tr></table></figure><h5 id="第四步：使用-AutoWired注入数据"><a href="#第四步：使用-AutoWired注入数据" class="headerlink" title="第四步：使用@AutoWired注入数据"></a>第四步：使用@AutoWired注入数据</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAopTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br></pre></td></tr></table></figure><h5 id="Tips-在测试方法上必须显示的添加-Test"><a href="#Tips-在测试方法上必须显示的添加-Test" class="headerlink" title="Tips: 在测试方法上必须显示的添加@Test"></a><strong>Tips:</strong> 在测试方法上必须显示的添加@Test</h5><p>使用@RunWith注解替换原有运行器，测试类中的测试方法即使不添加@Test注解也可以运行（有运行按钮）。但是会报如下错误：java.lang.Exception: No runnable methods。此时只要在测试方法上显示的添加@Test注解即可！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;​    ”万物皆对象“是面向对象编程思想OOP（Object Oriented Programming） 的最高境界。在面向对象中，我一直将自己（开发者）放在一个至高无上的位置上，可以操纵万物（对象），犹如一军统帅。那现在有一个问题，我的士兵除了作战之外还要吃饭，显然不可能让每一个士兵自己去解决吃饭问题。因此，军中有后勤部门，专门解决士兵作战之外的衣食等问题。简单的说，这就是一个切面问题，也就是我们今天讨论的重点&lt;strong&gt;面向切面编程&lt;/strong&gt;AOP(Aspect Oriented Programming )。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://songhui.club/source/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://songhui.club/source/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis分页组件--PageHelper</title>
    <link href="http://songhui.club/%E6%95%B0%E6%8D%AE%E5%BA%93/2020/MyBatis-pageHelper.html"/>
    <id>http://songhui.club/%E6%95%B0%E6%8D%AE%E5%BA%93/2020/MyBatis-pageHelper.html</id>
    <published>2020-01-18T07:43:28.000Z</published>
    <updated>2020-01-18T08:20:59.265Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>​    PageHelper是国内非常优秀的一款开源的 mybatis 分页插件，它支持基本主流与常用的数据库，例如 Oracle、Mysql、MariaDB、SQLite、Hsqldb 等。</p><a id="more"></a><p><a href="https://pagehelper.github.io/" target="_blank" rel="noopener">官网网址</a></p><p><a href="https://github.com/pagehelper/Mybatis-PageHelper" target="_blank" rel="noopener">GitHub地址</a></p><p><a href="https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/en/HowToUse.md" target="_blank" rel="noopener">How To Use</a></p><h1 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1. 基本使用"></a>1. 基本使用</h1><h3 id="1-1-第一步：导入Maven坐标"><a href="#1-1-第一步：导入Maven坐标" class="headerlink" title="1.1 第一步：导入Maven坐标"></a>1.1 第一步：导入Maven坐标</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 集中定义依赖版本号 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pagehelper.version</span>&gt;</span>5.1.2<span class="tag">&lt;/<span class="name">pagehelper.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;pagehelper.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-第二步：在Spring配置文件中配置拦截器插件"><a href="#1-2-第二步：在Spring配置文件中配置拦截器插件" class="headerlink" title="1.2 第二步：在Spring配置文件中配置拦截器插件"></a>1.2 第二步：在Spring配置文件中配置拦截器插件</h3><h6 id="applicationContext-dao-xml"><a href="#applicationContext-dao-xml" class="headerlink" title="applicationContext-dao.xml"></a>applicationContext-dao.xml</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置sqlSessionFactory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置实体类别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"cn.dintalk.domain"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置pageHelper分页的插件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"plugins"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.github.pagehelper.PageInterceptor"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 这里的几个配置主要演示如何使用，如果不理解，一定要去掉下面的配置 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 可区分数据库 --&gt;</span></span><br><span class="line">                        helperDialect=mysql</span><br><span class="line">                        <span class="comment">&lt;!-- 是否合理分页,针对首页尾页越界 --&gt;</span></span><br><span class="line">                        reasonable=true</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Tips:</strong> helperDialect:分页插件自定检测当前的数据库连接，选择合适的分页方式，可配置helperDialect属性来指定分页插件使用哪种方言，可使用以下缩写值：oracle, mysql, mariadb, sqlite,等等。还有其他的配置，需要时请查阅官方文档。</p><h3 id="1-3-第三步：service层分页"><a href="#1-3-第三步：service层分页" class="headerlink" title="1.3 第三步：service层分页"></a>1.3 第三步：service层分页</h3><p>​    PageHelper的基本使用有6种，可见官方文档。这里介绍PageHelper.startPage的静态方法。</p><h6 id="dao层代码"><a href="#dao层代码" class="headerlink" title="dao层代码"></a>dao层代码</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询所有</span></span><br><span class="line"><span class="function">List&lt;Company&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h6 id="dao层映射-xml"><a href="#dao层映射-xml" class="headerlink" title="dao层映射.xml"></a>dao层映射.xml</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 查询所有 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"baseResultMap"</span>&gt;</span></span><br><span class="line">    select * from sh_company</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="service层代码"><a href="#service层代码" class="headerlink" title="service层代码"></a>service层代码</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用PageHelper分页查询，page:当前页面，size:每页显示数量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PageInfo <span class="title">findPageByHelper</span><span class="params">(<span class="keyword">int</span> page, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.调用静态方法,开始分页</span></span><br><span class="line">    PageHelper.startPage(page,size);</span><br><span class="line">    <span class="comment">//2.照常调用</span></span><br><span class="line">    List&lt;Company&gt; companies = companyDao.findAll();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PageInfo(companies);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Tips：</strong> 在需要分页的MyBatis查询方法前调用 PageHelper.startPage 静态方法即可。格外需要注意的是：（紧跟在这个方法后的第一个MyBatis查询方法或被进行分页），因此在使用的时候留意顺序。</p><ul><li>返回值PageInfo中包含了分页页面所需的一切信息，包括展示的数据及页码、上一页等等。在页面取值的时候可以跟到PageInfo源码中查看清楚即可！</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;​    PageHelper是国内非常优秀的一款开源的 mybatis 分页插件，它支持基本主流与常用的数据库，例如 Oracle、Mysql、MariaDB、SQLite、Hsqldb 等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://songhui.club/source/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://songhui.club/source/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MyBatis" scheme="http://songhui.club/source/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis的逆向工程</title>
    <link href="http://songhui.club/%E6%95%B0%E6%8D%AE%E5%BA%93/2020/MyBatis-generate.html"/>
    <id>http://songhui.club/%E6%95%B0%E6%8D%AE%E5%BA%93/2020/MyBatis-generate.html</id>
    <published>2020-01-18T06:53:28.000Z</published>
    <updated>2020-01-18T07:42:37.577Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>​    MyBatis是目前很流行的持久层框架，很多企业都在采用。但是其复杂繁琐的配置，重复性的实体类创建等等，消耗了程序员大量的精力，同时有些地方如果一个细小的疏忽，可能导致最终功能运行失败。例如：在几十个字段的表中，某一列的列名配置疏忽。基于此，mybatis 推出了一套 jar 包，可以依据我们设计好的数据库表，自动生成 pojo、mapper 以及mapper.xml。有了逆向工程，便大大缩减了我们的开发时间。</p><a id="more"></a><p><a href="http://www.mybatis.org/generator/index.html" target="_blank" rel="noopener">官网</a></p><h1 id="1-使用逆向工程"><a href="#1-使用逆向工程" class="headerlink" title="1. 使用逆向工程"></a>1. 使用逆向工程</h1><h3 id="1-1-第一步：创建maven工程并导入依赖"><a href="#1-1-第一步：创建maven工程并导入依赖" class="headerlink" title="1.1 第一步：创建maven工程并导入依赖"></a>1.1 第一步：创建maven工程并导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入依赖坐标 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-第二步：编写连接数据库的配置-jdbc-properties"><a href="#1-2-第二步：编写连接数据库的配置-jdbc-properties" class="headerlink" title="1.2 第二步：编写连接数据库的配置(jdbc.properties)"></a>1.2 第二步：编写连接数据库的配置(jdbc.properties)</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># mysql驱动jar包的磁盘绝对路劲</span><br><span class="line">jdbc.path=G:\\repository\\mysql\\mysql-connector-java\\5.1.6\\mysql-connector-java-5.1.6.jar</span><br><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/shdb</span><br><span class="line">jdbc.username=sh</span><br><span class="line">jdbc.password=sh123</span><br></pre></td></tr></table></figure><h3 id="1-3-第三步：编写配置文件-mybatis-generator-config-xml-：（参见官网）"><a href="#1-3-第三步：编写配置文件-mybatis-generator-config-xml-：（参见官网）" class="headerlink" title="1.3 第三步：编写配置文件(mybatis-generator-config.xml)：（参见官网）"></a>1.3 第三步：编写配置文件(mybatis-generator-config.xml)：（参见官网）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.导入属性配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.指定特定数据库的jdbc驱动jar包的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span> <span class="attr">location</span>=<span class="string">"$&#123;jdbc.path&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.全局配置  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"context"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressDate"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库连接的信息：驱动类、连接地址、用户名、密码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">"$&#123;jdbc.url&#125;"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">"$&#123;jdbc.username&#125;"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和</span></span><br><span class="line"><span class="comment">            NUMERIC 类型解析为java.math.BigDecimal --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置生成文件的保存位置：★★★★★★★★★★★★★★★ --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--指定包名生成实体类 以及生成的地址 （可以自定义地址，如果路径不存在会自动创建） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"cn.dintalk.domain.system"</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetProject</span>=<span class="string">"G:\dintalk\project\generator\src\main\java"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 从数据库返回的值被清理前后的空格 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Mapper映射文件生成所在的目录 为每一个数据库的表生成对应的mapper文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"cn.dintalk.dao.system"</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">"G:\dintalk\project\generator\src\main\resources"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 客户端代码，生成易于使用的针对Model对象和XML配置文件 的代码</span></span><br><span class="line"><span class="comment">                type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象</span></span><br><span class="line"><span class="comment">                type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象</span></span><br><span class="line"><span class="comment">                type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"cn.dintalk.dao.system"</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetProject</span>=<span class="string">"G:\dintalk\project\generator\src\main\java"</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 指定数据库表：可同时指定多张表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">schema</span>=<span class="string">"dintalkdb"</span> <span class="attr">tableName</span>=<span class="string">"dintalktable"</span> <span class="attr">domainObjectName</span>=<span class="string">"User"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">mapperName</span>=<span class="string">"UserDao"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableCountByExample</span>=<span class="string">"false"</span> <span class="attr">enableDeleteByExample</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableSelectByExample</span>=<span class="string">"true"</span> <span class="attr">enableUpdateByExample</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-4-第四步：编写运行类生成文件（参见官网）"><a href="#1-4-第四步：编写运行类生成文件（参见官网）" class="headerlink" title="1.4 第四步：编写运行类生成文件（参见官网）"></a>1.4 第四步：编写运行类生成文件（参见官网）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeneratorSqlMapTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 官网提供的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generator</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        List&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">boolean</span> overwrite = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//指定 逆向工程配置文件</span></span><br><span class="line">        InputStream in = GeneratorSqlMapTest<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span></span><br><span class="line">            .getResourceAsStream("mybatis-generator-config.xml");</span><br><span class="line">        ConfigurationParser cp = <span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line">        Configuration config = cp.parseConfiguration(in);</span><br><span class="line">        DefaultShellCallback callback = <span class="keyword">new</span> DefaultShellCallback(overwrite);</span><br><span class="line">        MyBatisGenerator myBatisGenerator = <span class="keyword">new</span> MyBatisGenerator(config,</span><br><span class="line">                callback, warnings);</span><br><span class="line">        myBatisGenerator.generate(<span class="keyword">null</span>);</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//运行生成器方法，生成文件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            GeneratorSqlMapTest generatorSqlmap = <span class="keyword">new</span> GeneratorSqlMapTest();</span><br><span class="line">            generatorSqlmap.generator();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5-第五步：将生产的文件拷贝到项目中即可"><a href="#1-5-第五步：将生产的文件拷贝到项目中即可" class="headerlink" title="1.5 第五步：将生产的文件拷贝到项目中即可"></a>1.5 第五步：将生产的文件拷贝到项目中即可</h3><p><strong>Tips:</strong> 需要注意的有两点</p><ul><li>逆向工程的实体类没有实现序列化接口（Serializable）</li><li>生成的实体类查询特例类也没有实现序列化接口（有内部类，特例类和内部类都要实现才行：GeneratedCriteria 和 Criterion 内部类）。</li></ul><h1 id="2-主要API简介"><a href="#2-主要API简介" class="headerlink" title="2. 主要API简介"></a>2. 主要API简介</h1><p>​    逆向工程在生成pojo的同时会生成一个配套的pojoExample类。该类是根据不同的数据库表字段生成的查询特例类。使用示例如下(以Factory实体为例)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.测试查询一个:根据主键id</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Factory factory = factoryDao.selectByPrimaryKey(<span class="string">"1"</span>);</span><br><span class="line">    System.out.println(factory.getFactoryName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**2.使用特例进行查询</span></span><br><span class="line"><span class="comment">  * select * from co_factory</span></span><br><span class="line"><span class="comment">  *  where  这里的内容是靠criteria对象补全的</span></span><br><span class="line"><span class="comment">  *  group by   having</span></span><br><span class="line"><span class="comment">  *  order by   这里的内容是靠exmaple对象补全的</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByCondition</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="comment">//1.创建例子,进行特例查询</span></span><br><span class="line">     FactoryExample ex = <span class="keyword">new</span> FactoryExample();</span><br><span class="line">     <span class="comment">//2.进行查询(传入ex对象)，查询所有</span></span><br><span class="line">     List&lt;Factory&gt; factories = factoryDao.selectByExample(ex);</span><br><span class="line">     System.out.println(factories.size());</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//3.使用特例配置条件查询</span></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByCondition1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.创建例子,进行特例查询</span></span><br><span class="line">    FactoryExample ex = <span class="keyword">new</span> FactoryExample();</span><br><span class="line">    <span class="comment">//2.创建例子中的条件对象</span></span><br><span class="line">    FactoryExample.Criteria criteria = ex.createCriteria();</span><br><span class="line">    <span class="comment">//3.设置查询条件:这里的方法是和对应数据库中的字段名称有关的</span></span><br><span class="line">    criteria.andCtypeEqualTo(<span class="string">"货物"</span>);</span><br><span class="line">    <span class="comment">//4.加入排序: clause:从句的意思</span></span><br><span class="line">    ex.setOrderByClause(<span class="string">"create_time desc"</span>);</span><br><span class="line">    <span class="comment">//5.进行查询(传入ex对象)</span></span><br><span class="line">    List&lt;Factory&gt; factories = factoryDao.selectByExample(ex);</span><br><span class="line">    System.out.println(factories.size());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Tips:</strong> 若是在实体类中有一对多和多对一的关系存在，则需要相应的修改实体类，并在dao接口中编写相应的方法。在xml文件中使用collection和association标签配置关联查询即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;​    MyBatis是目前很流行的持久层框架，很多企业都在采用。但是其复杂繁琐的配置，重复性的实体类创建等等，消耗了程序员大量的精力，同时有些地方如果一个细小的疏忽，可能导致最终功能运行失败。例如：在几十个字段的表中，某一列的列名配置疏忽。基于此，mybatis 推出了一套 jar 包，可以依据我们设计好的数据库表，自动生成 pojo、mapper 以及mapper.xml。有了逆向工程，便大大缩减了我们的开发时间。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://songhui.club/source/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://songhui.club/source/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MyBatis" scheme="http://songhui.club/source/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis -- 必知必会</title>
    <link href="http://songhui.club/%E6%95%B0%E6%8D%AE%E5%BA%93/2020/mybatis-known.html"/>
    <id>http://songhui.club/%E6%95%B0%E6%8D%AE%E5%BA%93/2020/mybatis-known.html</id>
    <published>2020-01-12T14:07:57.000Z</published>
    <updated>2020-01-12T14:27:02.750Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>​    MyBatis的前身是Apache的一个开源项目iBatis，2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis。2013年11月迁移到GitHub，因此目前MyBatis是由GitHub维护的。同样作为持久层框架的Hibernate在前些年非常的火，它在配置了映射文件和数据库连接文件后就可以通过Session操作，它甚至提供了HQL去操作POJO进而操作数据库的数据，几乎可以使编程人员脱离sql语言。可是为什么MyBatis却越来越受欢迎呢？</p><a id="more"></a><p>我们稍稍总结如下,Hibernate: </p><ul><li>不方便的全表映射，比如更新时需要发送所有的字段；</li><li>无法根据不同的条件组装不同sql;</li><li>对多表关联和复制sql查询支持较差；</li><li>有HQL但性能较差，做不到sql优化；</li><li>不能有效支持存储过程；</li></ul><p>​    在当今的大型互联网中，灵活、sql优化，减少数据的传递是最基本的优化方法，但是Hibernate却无法满足我们的需求，而MyBatis提供了更灵活、更方便的方法。在MyBatis里，我们需要自己编写sql，虽然比Hibernate配置要多，但是是MyBatis可以配置动态sql，也可以优化sql,且支持存储过程，MyBatis几乎能做到 JDBC 所能做到的所有事情！凭借其高度灵活、可优化、易维护等特点，成为目前大型移动互联网项目的首选框架</p><h1 id="1-开发环境、流程及生命周期"><a href="#1-开发环境、流程及生命周期" class="headerlink" title="1.开发环境、流程及生命周期"></a>1.开发环境、流程及生命周期</h1><h2 id="1-1开发环境"><a href="#1-1开发环境" class="headerlink" title="1.1开发环境"></a>1.1开发环境</h2><h3 id="1-1-1-导入依赖jar包"><a href="#1-1-1-导入依赖jar包" class="headerlink" title="1.1.1 导入依赖jar包"></a>1.1.1 导入依赖jar包</h3><ul><li>导入mybatis的jar包，如果采用Maven进行部署，只需导入mybatis坐标。</li><li>导入数据库驱动jar包或坐标。</li><li>代码调试阶段可导入日志工具jar包或坐标，如log4j。</li><li>导入Junit单元测试坐标。</li></ul><h3 id="1-1-2-创建mybatis的主配置文件"><a href="#1-1-2-创建mybatis的主配置文件" class="headerlink" title="1.1.2 创建mybatis的主配置文件"></a>1.1.2 创建mybatis的主配置文件</h3><p>​    在resources目录下建立一个名字为mybatis-config.xml（名称随意）配置文件，编写所需配置信息。</p><h3 id="1-1-3-准备实体类和表结构"><a href="#1-1-3-准备实体类和表结构" class="headerlink" title="1.1.3 准备实体类和表结构"></a>1.1.3 准备实体类和表结构</h3><p>​    遵循开发规范：</p><ul><li><p>类属性命名尽量和表字段保持一致。</p></li><li><p>实体类实现序列化接口。</p></li><li><p>实体类属性使用包装类型定义，如Integer。</p><p><strong>Tips:</strong> 有时可以考虑通过定义时初始化来避免可能的空指针异常！</p><p>​    如：private List<String> list = new ArrayList&lt;&gt;() ;</p></li></ul><h3 id="1-1-4-创建Mapper接口（Dao接口）建立接口方法和sql映射文件"><a href="#1-1-4-创建Mapper接口（Dao接口）建立接口方法和sql映射文件" class="headerlink" title="1.1.4 创建Mapper接口（Dao接口）建立接口方法和sql映射文件"></a>1.1.4 创建Mapper接口（Dao接口）建立接口方法和sql映射文件</h3><p>创建Mapper接口，在内定义CRUD方法。</p><p>​    <strong>Tips:</strong>方法名唯一，需要在对应的mapper.xml文件中配置id。</p><p>在resources下创建sql映射文件。</p><p>​    <strong>Tips:</strong> 同对应的Mapper接口保持包结构及命名一致。</p><p>​    如：Mapper接口： cn.dintalk.dao.UserMapper</p><p>​        对应配置文件：cn.dintalk.dao.UserMapper.xml       </p><h3 id="1-1-5-将映射文件加入到mybatis主配置文件中"><a href="#1-1-5-将映射文件加入到mybatis主配置文件中" class="headerlink" title="1.1.5 将映射文件加入到mybatis主配置文件中"></a>1.1.5 将映射文件加入到mybatis主配置文件中</h3><p>将映射文件通过引入的方式加入到mybatis的主配置文件中。</p><p>​    <strong>Tips:</strong> 所有映射文件会随主配置文件在程序运行时加入内存，任一映射文件出错都会导致整个环境报错！（初学者经常搞混resultType和resultMap)。</p><h4 id="1-1-6-编写代码进行CRUD操作"><a href="#1-1-6-编写代码进行CRUD操作" class="headerlink" title="1.1.6 编写代码进行CRUD操作"></a>1.1.6 编写代码进行CRUD操作</h4><p>在映射文件中编写sql进行crud操作，在单元测试中，或service层中调用方法！</p><h2 id="1-2开发流程"><a href="#1-2开发流程" class="headerlink" title="1.2开发流程"></a>1.2开发流程</h2><p>环境搭建好后开发基本流程为：</p><ul><li>接口定义方法 。</li><li>Mapper.xml文件中编写sql。</li><li>单元测试或service调用。</li></ul><h6 id="Tips-接口中方法名称和Mapper-xml文件中sql语句的id保持一致！"><a href="#Tips-接口中方法名称和Mapper-xml文件中sql语句的id保持一致！" class="headerlink" title="Tips: 接口中方法名称和Mapper.xml文件中sql语句的id保持一致！"></a>Tips: 接口中方法名称和Mapper.xml文件中sql语句的id保持一致！</h6><h2 id="1-3生命周期"><a href="#1-3生命周期" class="headerlink" title="1.3生命周期"></a>1.3生命周期</h2><p>MyBatis的核心组件：</p><ul><li><p>SqlSessionFactoryBuilder(构造器)：根据配置信息或代码生成SqlSessionFactory</p></li><li><p>SqlSessionFactory(工厂接口):依靠工厂来生成SqlSession(会话)。</p></li><li><p>SqlSession(会话): 既可以发生sql去执行并返回结果，也可以获取Mapper的接口</p></li><li><p>SQL Mapper:它是MyBatis新设计的组件，它是由一个java接口和xml文件（或注解）构成的，需要给出对应的sql和映射规则。它负责发送sql去执行，并返回结果。</p><p>​    正确理解并掌握上述核心组件的生命周期可以让我们写出高效的程序，还可避免带来严重的并发问题。</p></li></ul><h3 id="1-3-1-SqlSessionFactoryBuilder"><a href="#1-3-1-SqlSessionFactoryBuilder" class="headerlink" title="1.3.1 SqlSessionFactoryBuilder"></a>1.3.1 SqlSessionFactoryBuilder</h3><p>​    其作用就是利用xml或java编码获得资源来构建SqlSessionFactory对象，构建成功就失去了存在的意义，将其回收。所以它的生命周期只存在于方法的局部。</p><h3 id="1-3-2-SqlSessionFactory"><a href="#1-3-2-SqlSessionFactory" class="headerlink" title="1.3.2 SqlSessionFactory"></a>1.3.2 SqlSessionFactory</h3><p>​    SqlSessionFactory的作用是创建SqlSession，而SqlSession就是一个会话，相当于JDBC中的Connection对象，每次访问数据库都需要通过SqlSessionFactory创建SqlSession，所以SqlSessionFactory应该在MyBatis应用的整个生命周期中。我们使每一个数据库只对应一个SqlSessionFactory（单例模式）。</p><h3 id="1-3-3-SqlSession"><a href="#1-3-3-SqlSession" class="headerlink" title="1.3.3 SqlSession"></a>1.3.3 SqlSession</h3><p>​    SqlSession是一个会话，相当于JDBC的一个Connection对象，它的生命周期应该是在请求数据库处理事务的过程中。是一个线程不安全的对象，涉及多线程时格外当心。此外，每次创建的SqlSession都必须及时关闭它。</p><h3 id="1-3-4-Mapper"><a href="#1-3-4-Mapper" class="headerlink" title="1.3.4 Mapper"></a>1.3.4 Mapper</h3><p>​    Mapper是一个接口，没有任何实现类，其作用是发送sql,返回我们需要的结果，或者执行sql修改数据库数据，因此它也因该在一个SqlSession事务方法之内，是一个方法级别的东西。就如同 JDBC中的一条sql语句的执行，它的最大范围和SqlSession是相同的。</p><h6 id="Tips-根据核心组件封装工具、形成SqlSession使用模板"><a href="#Tips-根据核心组件封装工具、形成SqlSession使用模板" class="headerlink" title="Tips: 根据核心组件封装工具、形成SqlSession使用模板"></a>Tips: 根据核心组件封装工具、形成SqlSession使用模板</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory build =<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;  <span class="comment">//使用MyBatis的Resources加载资源获得输入流，构建工厂</span></span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line">            build = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"资源文件加载失败!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用工厂生产sqlSession </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">openSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> build.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="SqlSession使用方法"><a href="#SqlSession使用方法" class="headerlink" title="SqlSession使用方法"></a>SqlSession使用方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.定义sqlSession</span></span><br><span class="line">SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    sqlSession = openSession();</span><br><span class="line">    <span class="comment">//2.获取映射器</span></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//3.some code like 'User u = mapper.findById(id);'</span></span><br><span class="line">    <span class="comment">//4.sqlSession不提交默认回滚！增删改需格外注意！</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (sqlSession != <span class="keyword">null</span>) &#123;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-映射器"><a href="#2-映射器" class="headerlink" title="2.映射器"></a>2.映射器</h1><h2 id="2-1映射器元素简介"><a href="#2-1映射器元素简介" class="headerlink" title="2.1映射器元素简介"></a>2.1映射器元素简介</h2><p>我们可以在映射器中定义哪些元素，以及它们有何作用呢？</p><table><thead><tr><th>元素名称</th><th>作用</th></tr></thead><tbody><tr><td>insert</td><td>定义插入语句</td></tr><tr><td>delete</td><td>定义删除语句</td></tr><tr><td>update</td><td>定义修改语句</td></tr><tr><td>select</td><td>定义查询语句</td></tr><tr><td>parameterMap</td><td>定义参数映射关系</td></tr><tr><td>resultMap</td><td>提供从数据库结果集到POJO映射规则</td></tr><tr><td>cache</td><td>配置当前命名空间的缓存配置（二级缓存）</td></tr><tr><td>sql</td><td>定义部分sql，各个地方都可引用</td></tr><tr><td>cache-ref</td><td>引用其他命名空间的缓存配置</td></tr></tbody></table><p>在各个元素当中又有相当多的属性配置项，这里不多赘述，通过下一节掌握常用的内容即可。这里特别说明sql元素的使用：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"user_columns"</span>&gt;</span>  <span class="comment">&lt;!-- 此处定义后，处处使用，尤其字段多的时候 --&gt;</span></span><br><span class="line">id, name, password   </span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">....</span>&gt;</span></span><br><span class="line">select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"user_columns"</span>/&gt;</span> from users where uid=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2简单CRUD操作"><a href="#2-2简单CRUD操作" class="headerlink" title="2.2简单CRUD操作"></a>2.2简单CRUD操作</h2><h3 id="2-2-1添加用户"><a href="#2-2-1添加用户" class="headerlink" title="2.2.1添加用户"></a>2.2.1添加用户</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.添加用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"add"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    INSERT into users (name,password) VALUES (#&#123;name&#125;,#&#123;password&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-2添加用户并返回数据库中的主键"><a href="#2-2-2添加用户并返回数据库中的主键" class="headerlink" title="2.2.2添加用户并返回数据库中的主键"></a>2.2.2添加用户并返回数据库中的主键</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 2.添加用户,获取数据库生成的主键值(需数据库具备主键自增功能) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"add"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"uid"</span>&gt;</span></span><br><span class="line">    insert into users (name,password) values(#&#123;name&#125;,#&#123;password&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3.添加用户,获取数据库生成的主键:数据库有无自动增长能力都可以--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"add"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyColumn</span>=<span class="string">"uid"</span> <span class="attr">keyProperty</span>=<span class="string">"uid"</span> <span class="attr">resultType</span>=<span class="string">"int"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span>&gt;</span></span><br><span class="line">        select last_insert_id();</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">    insert into users (name,password) values(#&#123;name&#125;,#&#123;password&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-3修改-删除用户"><a href="#2-2-3修改-删除用户" class="headerlink" title="2.2.3修改/删除用户"></a>2.2.3修改/删除用户</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 4.修改/删除用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    update users set name=#&#123;name&#125;,password=#&#123;password&#125; where uid=#&#123;uid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete"</span> &gt;</span></span><br><span class="line">    delete from users where uid=#&#123;uid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-4查询用户"><a href="#2-2-4查询用户" class="headerlink" title="2.2.4查询用户"></a>2.2.4查询用户</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 5.查询所有的用户 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 定义查询结果映射规则(结果集映射可以用别名) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userMap"</span> <span class="attr">type</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"uid"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"姓名"</span> <span class="attr">property</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 查询语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">    select uid as id,name as '姓名',password from users;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--6.根据用户id查询用户(单个参数)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    select uid,name,password from users where uid=#&#123;uid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 7.根据用户名和密码查询用户(接口定义方法参数时@Param(" ")进行指定,否则多个参数时</span></span><br><span class="line"><span class="comment">默认使用 arg0,arg1   或param1,param2来映射) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByNamePassword"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    select uid,name,password from users where name=#&#123;name&#125; and password=#&#123;password&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 8.根据用户实体对象查询用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByUser"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    select uid,name,password from users where name=#&#123;name&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 9.根据用户名进行模糊查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUsersLikeName"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    select uid,name,password from users where name like concat("%",#&#123;name&#125;,"%");</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Tips:</strong>  sql中如果有特殊符号可使用 <![CDATA[    ]]> 将语句抱起来。</p><h1 id="3-动态sql和高级查询"><a href="#3-动态sql和高级查询" class="headerlink" title="3.动态sql和高级查询"></a>3.动态sql和高级查询</h1><h2 id="3-1动态sql"><a href="#3-1动态sql" class="headerlink" title="3.1动态sql"></a>3.1动态sql</h2><p>​    MyBatis的动态sql包含这些元素：if  |  choose(when ohterwise) |trim(where set) | foreach ，通过这些元素来动态组装sql语句，主要是增改查操作。<strong>(实际开发中，严禁使用select * 操作。这里为了简便使用select *演示）！</strong></p><h3 id="3-1-1使用-if-实现动态sql-完成查询操作"><a href="#3-1-1使用-if-实现动态sql-完成查询操作" class="headerlink" title="3.1.1使用 if,实现动态sql,完成查询操作"></a>3.1.1使用 if,实现动态sql,完成查询操作</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.使用if,实现动态sql,完成查询操作 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByCondition"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    select uid,name,password,email from users where 1 = 1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name != null and name !=''"</span>&gt;</span></span><br><span class="line">        and name like concat("%",#&#123;name&#125;,"%")</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password != null and password != '' "</span>&gt;</span></span><br><span class="line">        and password = #&#123;password&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-1-2使用if-实现动态sql-完成更新操作"><a href="#3-1-2使用if-实现动态sql-完成更新操作" class="headerlink" title="3.1.2使用if,实现动态sql,完成更新操作"></a>3.1.2使用if,实现动态sql,完成更新操作</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 2.使用if,实现动态sql,完成更新操作 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">   update users set</span><br><span class="line">   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name != null and name != '' "</span>&gt;</span></span><br><span class="line">       name=#&#123;name&#125;,</span><br><span class="line">   <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password != null and password != '' "</span>&gt;</span></span><br><span class="line">       password=#&#123;password&#125;,</span><br><span class="line">   <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">   uid=#&#123;uid&#125; where uid=#&#123;uid&#125;; <span class="comment">&lt;!-- 保证任何情况下的sql完整 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-1-3使用if-实现动态sql-完成添加操作"><a href="#3-1-3使用if-实现动态sql-完成添加操作" class="headerlink" title="3.1.3使用if,实现动态sql,完成添加操作"></a>3.1.3使用if,实现动态sql,完成添加操作</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 3.使用if,实现动态sql,完成添加操作 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addUser"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    insert into users (name,</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password != null and password != '' "</span>&gt;</span></span><br><span class="line">        password,</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span>email,phoneNumber,birthday) values(#&#123;name&#125;,</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password != null and password != '' "</span>&gt;</span></span><br><span class="line">        #&#123;password&#125;,</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span>#&#123;email&#125;,#&#123;phoneNumber&#125;,#&#123;birthday&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-1-4使用choose-when-otherwise-实现动态sql-完成查询操作"><a href="#3-1-4使用choose-when-otherwise-实现动态sql-完成查询操作" class="headerlink" title="3.1.4使用choose  when  otherwise,实现动态sql,完成查询操作"></a>3.1.4使用choose  when  otherwise,实现动态sql,完成查询操作</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 4.使用choose when otherwise,实现动态sql,完成查询操作 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByCondition"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    select * from users where 1 = 1 <span class="comment">&lt;!-- 动态组装准备 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"name != null and name != '' "</span>&gt;</span></span><br><span class="line">            and name like concat("%",#&#123;name&#125;,"%");</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">            and 1 = 2; <span class="comment">&lt;!-- 动态否决 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-1-5使用if和where-实现动态sql-完成查询操作-★★★"><a href="#3-1-5使用if和where-实现动态sql-完成查询操作-★★★" class="headerlink" title="3.1.5使用if和where,实现动态sql,完成查询操作  ★★★"></a>3.1.5使用if和where,实现动态sql,完成查询操作  ★★★</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 5.使用if和where,实现动态sql,完成查询操作 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByCondition"</span> <span class="attr">resultType</span>=<span class="string">"user"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    select * from users</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span>  <span class="comment">&lt;!-- 至少有一个if执行时才会加上where关键字并去掉紧跟后面的and|or关键字 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name != null and name != '' "</span>&gt;</span></span><br><span class="line">            and name like concat("%",#&#123;name&#125;,"%")</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password != null and password != '' "</span>&gt;</span></span><br><span class="line">            and password=#&#123;password&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-1-6使用if和set-实现动态sql-完成更新操作-★★"><a href="#3-1-6使用if和set-实现动态sql-完成更新操作-★★" class="headerlink" title="3.1.6使用if和set,实现动态sql,完成更新操作 ★★"></a>3.1.6使用if和set,实现动态sql,完成更新操作 ★★</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 6.使用if和set,实现动态sql,完成更新操作 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    update users</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span>   <span class="comment">&lt;!-- set元素会去掉最后一个,号 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name != null and name != '' "</span>&gt;</span></span><br><span class="line">            name=#&#123;name&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password != null and password != '' "</span>&gt;</span></span><br><span class="line">            password=#&#123;password&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        uid=#&#123;uid&#125;,</span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where uid=#&#123;uid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- trim元素的使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"where"</span> <span class="attr">prefixOverrides</span>=<span class="string">"and|or"</span>&gt;</span><span class="tag">&lt;/<span class="name">trim</span>&gt;</span> <span class="comment">&lt;!-- 等同与where元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"set"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span><span class="tag">&lt;/<span class="name">trim</span>&gt;</span> <span class="comment">&lt;!-- 等同与set元素 --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-1-7使用foreach-实现动态sql-完成根据id集合、数组等的查询操作"><a href="#3-1-7使用foreach-实现动态sql-完成根据id集合、数组等的查询操作" class="headerlink" title="3.1.7使用foreach,实现动态sql,完成根据id集合、数组等的查询操作"></a>3.1.7使用foreach,实现动态sql,完成根据id集合、数组等的查询操作</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 7.使用foreach,实现动态sql,完成根据id list列表的查询操作 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByIds"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    select * from users where uid in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"collection"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">item</span>=<span class="string">"uid"</span>&gt;</span></span><br><span class="line">        #&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- foreach中的collection值取决于要遍历的对象类型(mybatis内部做判断后默认的)</span></span><br><span class="line"><span class="comment"> List : 可取 collection或list</span></span><br><span class="line"><span class="comment"> Set  : 取 collection</span></span><br><span class="line"><span class="comment"> Array: 取 array</span></span><br><span class="line"><span class="comment"> Map  : 取 _parameter   （用map无意义，遍历的依旧是value）</span></span><br><span class="line"><span class="comment">上述默认引用都可以在接口方法中通过@Param（“  ”）覆盖掉！</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-1-8bind元素"><a href="#3-1-8bind元素" class="headerlink" title="3.1.8bind元素"></a>3.1.8bind元素</h3><p>​    bind元素的作用是通过OGNL表达式自定义一个上下文变量，这样更方便我们使用。在进行模糊查询的时候，如果是MySQL数据库，我们常用concat函数用“%”和参数连接。然而在Oracle数据则是用连接符号“||”。这样sql就需要提供两种形式去实现。用bind元素，我们就不必使用数据库语言，只要使用MyBatis的语言即可与所需参数相连。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByCondition"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用bind定义上下文变量 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">"pattern"</span> <span class="attr">value</span>=<span class="string">"'%' + name + '%' "</span>/&gt;</span></span><br><span class="line">    select uid,name,password,email from users where 1 = 1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name != null and name !=''"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- and name like concat("%",#&#123;name&#125;,"%") --&gt;</span></span><br><span class="line">        and name like #&#123;pattern&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password != null and password != '' "</span>&gt;</span></span><br><span class="line">        and password = #&#123;password&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-2高级查询（多表查询）"><a href="#3-2高级查询（多表查询）" class="headerlink" title="3.2高级查询（多表查询）"></a>3.2高级查询（多表查询）</h2><h3 id="3-2-1一对多关联查询"><a href="#3-2-1一对多关联查询" class="headerlink" title="3.2.1一对多关联查询"></a>3.2.1一对多关联查询</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.使用多表查询,完成一对多关联查询及映射 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- user结果集封装,可以通过继承重复使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userMap"</span> <span class="attr">type</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">property</span>=<span class="string">"uid"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- loginInfo结果集,继承user结果集完整数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userLoginInfoMap"</span> <span class="attr">extends</span>=<span class="string">"userMap"</span> <span class="attr">type</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用collection映射多的一方,ofType指定集合中的数据类型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"loginInfos"</span> <span class="attr">ofType</span>=<span class="string">"loginInfo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"lid"</span> <span class="attr">property</span>=<span class="string">"lid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"ip"</span> <span class="attr">property</span>=<span class="string">"ip"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"loginTime"</span> <span class="attr">property</span>=<span class="string">"loginTime"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义查询语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAllUsers"</span> <span class="attr">resultMap</span>=<span class="string">"userLoginInfoMap"</span>&gt;</span></span><br><span class="line">    select * from users u left join login_infos li on u.uid = li.uid;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-2多对一关联查询-别名映射-resultMap映射-resultMap结合association映射"><a href="#3-2-2多对一关联查询-别名映射-resultMap映射-resultMap结合association映射" class="headerlink" title="3.2.2多对一关联查询(别名映射|resultMap映射|resultMap结合association映射)"></a>3.2.2多对一关联查询(别名映射|resultMap映射|resultMap结合association映射)</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 2.多对一,采用别名映射关联关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAllLoginInfos"</span> <span class="attr">resultType</span>=<span class="string">"loginInfo"</span>&gt;</span></span><br><span class="line">    select li.*,</span><br><span class="line">    u.uid "user.uid",</span><br><span class="line">    u.name "user.name",</span><br><span class="line">    u.password "user.password"</span><br><span class="line">    from login_infos li,users u</span><br><span class="line">    where li.uid = u.uid;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3.多对一,采用resultMap进行结关联关系的映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userMap"</span> <span class="attr">type</span>=<span class="string">"loginInfo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">property</span>=<span class="string">"user.uid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"user.name"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"user.password"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span>    </span><br><span class="line"><span class="comment">&lt;!-- 这里的resultMap继承关系最好和POJO中的关联关系保持一致，便于理解</span></span><br><span class="line"><span class="comment"> 这里不一致，但也可以运行</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userLoginInfoMap"</span> <span class="attr">extends</span>=<span class="string">"userMap"</span> <span class="attr">type</span>=<span class="string">"loginInfo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"lid"</span> <span class="attr">property</span>=<span class="string">"lid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"ip"</span> <span class="attr">property</span>=<span class="string">"ip"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"loginTime"</span> <span class="attr">property</span>=<span class="string">"loginTime"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAllLoginInfos1"</span> <span class="attr">resultMap</span>=<span class="string">"userLoginInfoMap"</span>&gt;</span></span><br><span class="line">    select * from users u,login_infos li where u.uid=li.uid;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 4.多对一,使用resultMap结合association进行关联关系的映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"loginInfoMap"</span> <span class="attr">type</span>=<span class="string">"loginInfo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"lid"</span> <span class="attr">property</span>=<span class="string">"lid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"ip"</span> <span class="attr">property</span>=<span class="string">"ip"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"loginTime"</span> <span class="attr">property</span>=<span class="string">"loginTime"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这里的resultMap继承关系和POJO的关联关系保持了一致，即LoginInfo下有User属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"loginInfoUserMap"</span> <span class="attr">extends</span>=<span class="string">"loginInfoMap"</span> <span class="attr">type</span>=<span class="string">"loginInfo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">javaType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">property</span>=<span class="string">"uid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAllLoginInfos2"</span> <span class="attr">resultMap</span>=<span class="string">"loginInfoUserMap"</span>&gt;</span></span><br><span class="line">    select * from users u,login_infos li where u.uid=li.uid;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-3多对多关联查询"><a href="#3-2-3多对多关联查询" class="headerlink" title="3.2.3多对多关联查询"></a>3.2.3多对多关联查询</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 13.使用多表查询,完成多对多查询,查找所有的用户及其角色 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意：为了避免冗余，这里继承了2.2中的resultMap --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userRoleMap"</span> <span class="attr">extends</span>=<span class="string">"userMap"</span> <span class="attr">type</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"roles"</span> <span class="attr">ofType</span>=<span class="string">"role"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"rid"</span> <span class="attr">property</span>=<span class="string">"rid"</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"description"</span> <span class="attr">property</span>=<span class="string">"description"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 多对多主要在sql编写上，需要借助中间表 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAllUsers"</span> <span class="attr">resultMap</span>=<span class="string">"userRoleMap"</span>&gt;</span></span><br><span class="line">     select * from users u left join users_roles ur </span><br><span class="line">     on u.uid=ur.uid inner join roles r on ur.rid=r.rid;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="4-嵌套查询和延迟加载"><a href="#4-嵌套查询和延迟加载" class="headerlink" title="4.嵌套查询和延迟加载"></a>4.嵌套查询和延迟加载</h1><h2 id="4-1加载策略"><a href="#4-1加载策略" class="headerlink" title="4.1加载策略"></a>4.1加载策略</h2><p>​    在关联查询时，对于关联的一方是否查询出来，要根据业务需求而定。不能通过编码方式进行策略的改变，而应该通过修改配置文件改变加载策略。可以使用嵌套查询（分步查询）。</p><h2 id="4-2嵌套查询"><a href="#4-2嵌套查询" class="headerlink" title="4.2嵌套查询"></a>4.2嵌套查询</h2><h3 id="4-2-1根据多的一方，嵌套查询少的一方"><a href="#4-2-1根据多的一方，嵌套查询少的一方" class="headerlink" title="4.2.1根据多的一方，嵌套查询少的一方"></a>4.2.1根据多的一方，嵌套查询少的一方</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.嵌套查询,使用reultMap结合association使用引用的mapper.xml进行查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"loginInfoMap"</span> <span class="attr">type</span>=<span class="string">"loginInfo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"lid"</span> <span class="attr">property</span>=<span class="string">"lid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"ip"</span> <span class="attr">property</span>=<span class="string">"ip"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"loginTime"</span> <span class="attr">property</span>=<span class="string">"loginTime"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"loginInfoUserMap"</span> <span class="attr">extends</span>=<span class="string">"loginInfoMap"</span> <span class="attr">type</span>=<span class="string">"loginInfo"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 解决user属性: property:属性</span></span><br><span class="line"><span class="comment">column:查询依据，也是当前查询表的外键</span></span><br><span class="line"><span class="comment">        select:指向根据外键查询的xml唯一映射</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">column</span>=<span class="string">"uid"</span> </span></span><br><span class="line"><span class="tag">                 <span class="attr">select</span>=<span class="string">"cn.dintalk.UserMapper.findById"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAllLoginInfos3"</span> <span class="attr">resultMap</span>=<span class="string">"loginInfoUserMap"</span>&gt;</span></span><br><span class="line">    select * from login_infos;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在association中，select指向的是另一个Mapper.xml文件中的映射（根据命名空间和id) --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- UserMapper.xml中  14.嵌套查询之 根据uid查询用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    select * from users where uid = #&#123;uid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-2根据少的一方，嵌套查询多的一方"><a href="#4-2-2根据少的一方，嵌套查询多的一方" class="headerlink" title="4.2.2根据少的一方，嵌套查询多的一方"></a>4.2.2根据少的一方，嵌套查询多的一方</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 2.使用嵌套查询,可通过懒加载优化sql,查询所有的用户及其日志信息 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 为了简便，这里继承了上述的id为userMap的resultMap --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userLoginInfoMap"</span> <span class="attr">extends</span>=<span class="string">"userMap"</span> <span class="attr">type</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"loginInfos"</span>  <span class="attr">column</span>=<span class="string">"uid"</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">select</span>=<span class="string">"cn.dintalk.dao.LoginInfoMapper.findAllLoginInfos"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAllUser"</span> <span class="attr">resultMap</span>=<span class="string">"userLoginInfoMap1"</span>&gt;</span></span><br><span class="line">    select * from users;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 同理，在collection中，select指向的是另一个Mapper.xml文件的映射 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--LoginInfoMapper.xml中  5.根据用户id查询所有的登录信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAllLoginInfos"</span> <span class="attr">resultType</span>=<span class="string">"loginInfo"</span>&gt;</span></span><br><span class="line">    select * from login_infos where uid=#&#123;uid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-3配置延迟加载"><a href="#4-3配置延迟加载" class="headerlink" title="4.3配置延迟加载"></a>4.3配置延迟加载</h2><h3 id="4-3-1全局配置，修改mybatis-xml主配置文件"><a href="#4-3-1全局配置，修改mybatis-xml主配置文件" class="headerlink" title="4.3.1全局配置，修改mybatis.xml主配置文件"></a>4.3.1全局配置，修改mybatis.xml主配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 2.配置延迟加载,即sql优化 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启用懒加载策略 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 覆盖掉延迟加载的触发方法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadTriggerMethods"</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启用延迟加载后，mybatis默认有toString、equals等4个触发加载的方法。我们也可以将其覆盖掉。</p><p>延迟加载，即用到关联数据的时候再去查，不用就不查。（service层中会有很多方法调用dao方法，根据service层中的实际需求动态调整加载策略，高效利用资源！)</p><h3 id="4-3-2每个association和collection都有fetchType属性"><a href="#4-3-2每个association和collection都有fetchType属性" class="headerlink" title="4.3.2每个association和collection都有fetchType属性"></a>4.3.2每个association和collection都有fetchType属性</h3><h6 id="该属性的值或覆盖掉全局配置"><a href="#该属性的值或覆盖掉全局配置" class="headerlink" title="该属性的值或覆盖掉全局配置"></a>该属性的值或覆盖掉全局配置</h6><p>fetchType=”lazy”(默认） | eager</p><ul><li>lazy ： 支持延迟加载</li><li>eager : 立即加载</li></ul><h1 id="5-事务控制及数据源"><a href="#5-事务控制及数据源" class="headerlink" title="5.事务控制及数据源"></a>5.事务控制及数据源</h1><h2 id="5-1事务控制"><a href="#5-1事务控制" class="headerlink" title="5.1事务控制"></a>5.1事务控制</h2><h6 id="默认情况下：MySql的事务是自动提交的。"><a href="#默认情况下：MySql的事务是自动提交的。" class="headerlink" title="默认情况下：MySql的事务是自动提交的。"></a>默认情况下：MySql的事务是自动提交的。</h6><p>​    通过 JDBC 可以手动控制：</p><p>​        Connection.setAutoCommit(false);</p><p>​        Connection.commit();</p><p>​        Connection.rollback();// 开启事务后，未提交会自动回滚！</p><h6 id="MyBatis中-mybatis-config-xml-作如下配置"><a href="#MyBatis中-mybatis-config-xml-作如下配置" class="headerlink" title="MyBatis中: mybatis-config.xml 作如下配置"></a>MyBatis中: mybatis-config.xml 作如下配置</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br></pre></td></tr></table></figure><p>相当于使用 JDBC 进行事务控制：（增删改时不提交会自动回滚！）</p><p>获取SqlSession时：SqlSessionFactory.openSession();  // 手动控制事务  ★</p><p>​                   SqlSessionFactory.openSession(true); //自动提交事务</p><h2 id="5-2数据源"><a href="#5-2数据源" class="headerlink" title="5.2数据源"></a>5.2数据源</h2><h3 id="5-2-1mybatis内置数据源"><a href="#5-2-1mybatis内置数据源" class="headerlink" title="5.2.1mybatis内置数据源"></a>5.2.1mybatis内置数据源</h3><p>mybatis内置了三种数据源：</p><p>UNPOOLED :不带有池（连接池）|学习时用</p><p>POOLED : 带有池的 | 实际生产环境使用</p><p>JNDI : mybatis提供的JndiDataSourceFactory来获取数据源</p><h3 id="5-2-2内部原理"><a href="#5-2-2内部原理" class="headerlink" title="5.2.2内部原理"></a>5.2.2内部原理</h3><p>POOLED对应的是PooledDataSource数据源，PooledDataSourceFactory用来生产带有池的数据源。</p><p>UNPOOLED对应的是UnpooledDataSource数据源，UnpooledDataSourceFactory用来生产不带有池的数据源。</p><h3 id="5-2-3使用Druid等第三方数据源-以Druid为例"><a href="#5-2-3使用Druid等第三方数据源-以Druid为例" class="headerlink" title="5.2.3使用Druid等第三方数据源(以Druid为例)"></a>5.2.3使用Druid等第三方数据源(以Druid为例)</h3><h6 id="第一步：引入Druid的Jar包或数据源"><a href="#第一步：引入Druid的Jar包或数据源" class="headerlink" title="第一步：引入Druid的Jar包或数据源"></a>第一步：引入Druid的Jar包或数据源</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="第二步：编写工厂类，用来产生Druid的数据源，一般选择继承UnpooledDataSourceFactory"><a href="#第二步：编写工厂类，用来产生Druid的数据源，一般选择继承UnpooledDataSourceFactory" class="headerlink" title="第二步：编写工厂类，用来产生Druid的数据源，一般选择继承UnpooledDataSourceFactory"></a>第二步：编写工厂类，用来产生Druid的数据源，一般选择继承UnpooledDataSourceFactory</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceFactory</span> <span class="keyword">extends</span> <span class="title">UnpooledDataSourceFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataSourceFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dataSource = <span class="keyword">new</span> DruidDataSource();<span class="comment">//创建druid数据源</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="第三步：在mybatis-config-xml中进行配置"><a href="#第三步：在mybatis-config-xml中进行配置" class="headerlink" title="第三步：在mybatis-config.xml中进行配置"></a>第三步：在mybatis-config.xml中进行配置</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1.类别名的配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"cn.dintalk.dataSource.DataSourceFactory"</span> <span class="attr">alias</span>=<span class="string">"DRUID"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 2.配置druid数据源 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dataSource</span>  <span class="attr">type</span>=<span class="string">"DRUID"</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- 3.配置数据库连接：name由数据源中的setXXX而定，value是外部配置的key --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="6-MyBatis的缓存"><a href="#6-MyBatis的缓存" class="headerlink" title="6.MyBatis的缓存"></a>6.MyBatis的缓存</h1><h2 id="6-1系统缓存"><a href="#6-1系统缓存" class="headerlink" title="6.1系统缓存"></a>6.1系统缓存</h2><p>MyBatis对缓存提供支持，但是在没有配置的默认情况下，它只开启一级缓存。</p><h3 id="6-1-1一级缓存"><a href="#6-1-1一级缓存" class="headerlink" title="6.1.1一级缓存"></a>6.1.1一级缓存</h3><p>​    一级缓存只是相对于同一个SqlSession而言的。使用SqlSession第一次查询后，MyBatis会将其放在缓存中，以后再查询时，如果没有声明需要刷新，且缓存未超时的情况下，SqlSession都只会取出当前缓存的数据，而不会再次发送Sql到数据库。</p><h3 id="6-1-2二级缓存"><a href="#6-1-2二级缓存" class="headerlink" title="6.1.2二级缓存"></a>6.1.2二级缓存</h3><p>​    二级缓存是在SqlSessionFactory层面上的，可以将缓存提供给各个SqlSession对象共享。</p><h6 id="开启二级缓存配置"><a href="#开启二级缓存配置" class="headerlink" title="开启二级缓存配置"></a>开启二级缓存配置</h6><h6 id="mybatis-confi-xml文件中-默认开启，可忽略"><a href="#mybatis-confi-xml文件中-默认开启，可忽略" class="headerlink" title="mybatis-confi.xml文件中(默认开启，可忽略)"></a>mybatis-confi.xml文件中(默认开启，可忽略)</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span>  </span><br><span class="line">  <span class="comment">&lt;!-- 二级缓存配置(默认开启,此行可省略) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="Mapper-xml文件中"><a href="#Mapper-xml文件中" class="headerlink" title="Mapper.xml文件中"></a>Mapper.xml文件中</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.dintalk.dao.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span>/&gt;</span>  <span class="comment">&lt;!-- 开启二级缓存，使用默认配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用默认配置意味着：</span></span><br><span class="line"><span class="comment">映射语句文件中的所有select语句将会被缓存。</span></span><br><span class="line"><span class="comment">映射语句文件中的所有insert、update和delete语句会刷新缓存。</span></span><br><span class="line"><span class="comment">缓存使用默认的Least Recently Used(LRU，最近最少使用的)回收策略。</span></span><br><span class="line"><span class="comment">缓存会存1024个列表集合或对象（无论查询方法返回什么）</span></span><br><span class="line"><span class="comment">缓存会被视为是read/write（可读可写）的缓存</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Tips:</strong> </p><ul><li>一级缓存中存放的是对象本身，是同一个对象！</li><li>二级缓存中存放的是对象的拷贝，对象所属类必须实现jav.io.Serializable接口!</li></ul><h6 id="配置缓存"><a href="#配置缓存" class="headerlink" title="配置缓存"></a>配置缓存</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span>  <span class="attr">evicition</span>=<span class="string">"LRU"</span> <span class="attr">flushInterval</span>=<span class="string">"100000"</span> <span class="attr">size</span>=<span class="string">"1024"</span> <span class="attr">readOnly</span>=<span class="string">true/</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>eviction: 代表的是缓存回收策略，目前MyBatis提供以下策略：</p><p>​    （1）LRU, 最近最少使用的，移除最长时间不用的对象。</p><p>​    （2）FIFO, 先进先出，按对象进入缓存的顺序来移除它们。</p><p>​    （3）SOFT,软引用，移除基于垃圾回收器状态和软引用规则的对象。</p><p>​    （4）WEAK,弱引用，更积极地移除基于垃圾收集器状态和弱引用规则的对象。</p></li><li><p>flushInterval: 刷新间隔时间，单位为毫秒。</p></li><li><p>size: 引用数目，代表缓存最多可以存储多少个对象。</p></li><li><p>readOnly: 只读，意味着缓存数据只读。</p></li></ul><h2 id="6-2自定义缓存"><a href="#6-2自定义缓存" class="headerlink" title="6.2自定义缓存"></a>6.2自定义缓存</h2><p>​    系统缓存是MyBatis应用机器上的本地缓存，我们也可以使用缓存服务器来定制缓存，如比较流行的Redis缓存。我们需要实现MyBatis为我们提供的接口org.apache.ibatis.cache.Cache,缓存接口简介：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取缓存编号</span></span><br><span class="line"><span class="function">String <span class="title">getId</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//保存key值缓存对象</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">putObject</span><span class="params">(Object key,Object value)</span></span>;</span><br><span class="line"><span class="comment">//通过key获取缓存对象</span></span><br><span class="line"><span class="function">Object <span class="title">getObject</span><span class="params">(Object key)</span></span>;</span><br><span class="line"><span class="comment">//通过key删除缓存对象</span></span><br><span class="line"><span class="function">Object <span class="title">removeObject</span><span class="params">(Object key)</span></span>;</span><br><span class="line"><span class="comment">//清空缓存</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//获取缓存对象大小</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//获取缓存的读写锁</span></span><br><span class="line"><span class="function">ReadWriterLock <span class="title">getReadWriterLock</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>由于每种缓存都有其不同的特点，上面的接口都需要我们去实现。假设我们已经有一个实现类：cn.dintalk.MyCache。则配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">"cn.dintalk.MyCache"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>完成上述配置，就能使用自定义的缓存了。MyBatis也支持在缓存中定义常用的属性，如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">"cn.dintalk.MyCache"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"localhost"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果我们在MyCache这个类中增加setHost(String host) 方法,那么它在初始化的时候就会被调用，这样我们可以对自定义的缓存设置一些外部参数。</p><p><strong>Tips:</strong>  我们也可配置Sql层面的缓存规则，来决定它们是否需要刷新或使用缓存。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">...flushCache</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">...flushCache</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">...flushCache</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">...flushCache</span>=<span class="string">"false"</span> <span class="attr">useCache</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h1 id="7-附录-MyBatis常用配置及开发Tips"><a href="#7-附录-MyBatis常用配置及开发Tips" class="headerlink" title="7.附录-MyBatis常用配置及开发Tips"></a>7.附录-MyBatis常用配置及开发Tips</h1><h3 id="附录1：mybatis-config-xml常用配置"><a href="#附录1：mybatis-config-xml常用配置" class="headerlink" title="附录1：mybatis-config.xml常用配置"></a>附录1：mybatis-config.xml常用配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.引入外部的配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.配置延迟加载,即sql优化 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 启用懒加载策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 覆盖掉延迟加载的触发方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadTriggerMethods"</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 二级缓存配置(默认开启,此行可省略) --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用二级缓存,在对应的mapper.xml中加入cache即可 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;setting name="cacheEnabled" value="true"/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3.类别名的配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 单个类的配置 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;typeAlias type="cn.dintalk.domain.User" alias="user"/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置druid数据源工厂类别名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"cn.dintalk.dataSource.DataSourceFactory"</span> <span class="attr">alias</span>=<span class="string">"DRUID"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 给包中所有的类配置默认别名, 即类名首字母小写--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.dintalk.domain"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 4.使用默认的环境配置(可以是多个) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 事务管理器,此处配置 为JDBC --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 数据源配置,此处配置为 POOLED--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;dataSource  type="POOLED"&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置druid数据源 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span>  <span class="attr">type</span>=<span class="string">"DRUID"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 配置数据库连接：name由数据源中的setXXX而定，value是外部配置的key --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 5.注册映射文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定资源文件路径 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper resource="cn/dintalk/dao/UserMapper.xml"&gt;&lt;/mapper&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper resource="cn/dintalk/dao/LoginInfoMapper.xml"&gt;&lt;/mapper&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 基于Mapper接口的开发:指定类名--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper class="cn.dintalk.dao.UserMapper"/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定基于Mapper接口开发的包:(需类名和xml文件名一致,包名一致)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.dintalk.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="附录2：Mapper-xml头约束"><a href="#附录2：Mapper-xml头约束" class="headerlink" title="附录2：Mapper.xml头约束"></a>附录2：Mapper.xml头约束</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.dintalk.dao.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span>/&gt;</span> <span class="comment">&lt;!-- 开启二级缓存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;​    MyBatis的前身是Apache的一个开源项目iBatis，2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis。2013年11月迁移到GitHub，因此目前MyBatis是由GitHub维护的。同样作为持久层框架的Hibernate在前些年非常的火，它在配置了映射文件和数据库连接文件后就可以通过Session操作，它甚至提供了HQL去操作POJO进而操作数据库的数据，几乎可以使编程人员脱离sql语言。可是为什么MyBatis却越来越受欢迎呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://songhui.club/source/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://songhui.club/source/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MyBatis" scheme="http://songhui.club/source/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>JdbcTemplate:(Jdbc模板)</title>
    <link href="http://songhui.club/%E6%95%B0%E6%8D%AE%E5%BA%93/2020/jdbc-template.html"/>
    <id>http://songhui.club/%E6%95%B0%E6%8D%AE%E5%BA%93/2020/jdbc-template.html</id>
    <published>2020-01-12T05:51:40.000Z</published>
    <updated>2020-01-12T06:02:28.590Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>​    通过 Jdbc 、C3P0 、Druid 的使用我们会发现即使我们做了工具的封装，但重复性的代码依旧很多。今天我们通过 JdbcTemplate 即 Jdbc 模板来使我们的代码更加简洁，逻辑更加清晰。</p><a id="more"></a><h1 id="1-JdbcTemplate-Jdbc模板"><a href="#1-JdbcTemplate-Jdbc模板" class="headerlink" title="1. JdbcTemplate:(Jdbc模板)"></a>1. JdbcTemplate:(Jdbc模板)</h1><p>​    JdbcTemplate是Spring对JDBC的封装。我们可以将其理解为使用Java通过JDBC操作数据库的固定套路写法。使开发人员对数据库操作只关注： </p><ol><li><p><strong>数据的请求（sql）</strong></p></li><li><p><strong>请求的响应（查询返回）</strong></p><h2 id="JdbcTemplate使用步骤："><a href="#JdbcTemplate使用步骤：" class="headerlink" title="JdbcTemplate使用步骤："></a>JdbcTemplate使用步骤：</h2><hr><h3 id="1-1导入Jar包"><a href="#1-1导入Jar包" class="headerlink" title="1.1导入Jar包"></a>1.1导入Jar包</h3><h3 id="1-2创建JdbcTemplate对象"><a href="#1-2创建JdbcTemplate对象" class="headerlink" title="1.2创建JdbcTemplate对象"></a>1.2创建JdbcTemplate对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传入连接池对象，JdbcTemplate会自动维护连接池</span></span><br><span class="line">JdbcTemplate jdbcTemplate = </span><br><span class="line">    <span class="keyword">new</span> JdbcTemplate(MyJdbcUtils.getDataSource())；</span><br></pre></td></tr></table></figure><h3 id="1-3编写sql语句"><a href="#1-3编写sql语句" class="headerlink" title="1.3编写sql语句"></a>1.3编写sql语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 依旧使用预编译对象的格式</span></span><br><span class="line">String sql = <span class="string">"insert into user values(null,?,?) "</span>；</span><br></pre></td></tr></table></figure><h3 id="1-4执行并返回结果"><a href="#1-4执行并返回结果" class="headerlink" title="1.4执行并返回结果"></a>1.4执行并返回结果</h3><h6 id="增删改："><a href="#增删改：" class="headerlink" title="增删改："></a>增删改：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  用于执行INSERT、UPDATE、DELETE等DML语句</span></span><br><span class="line"><span class="comment">//  sql: 要执行的sql语句</span></span><br><span class="line"><span class="comment">//  args: sql执行时需要的参数|数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">final</span> String sql,Object... args)</span></span></span><br></pre></td></tr></table></figure><h6 id="查询："><a href="#查询：" class="headerlink" title="查询："></a>查询：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.queryForObject返回一个指定类型**</span></span><br><span class="line">String sql = <span class="string">"select pname from product where id = ?"</span>；</span><br><span class="line">String pname = template.queryForObject(sql, String<span class="class">.<span class="keyword">class</span>, 3)；</span></span><br><span class="line"><span class="class">//2.<span class="title">queryForMap</span>返回一个<span class="title">Map</span>集合对象</span></span><br><span class="line"><span class="class"><span class="title">String</span> <span class="title">sql</span> </span>= <span class="string">"select * from product where id = ?"</span>；</span><br><span class="line">Map&lt;String, Object&gt; map = template.queryForMap(sql, <span class="number">4</span>)；</span><br><span class="line"><span class="comment">//3.queryForList返回一个List集合对象，集合对象存储Map类型数据</span></span><br><span class="line">String sql = <span class="string">"select * from product where id in (3,4)"</span>；</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; list = template.queryForList(sql,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"><span class="comment">//4. query使用BeanPropertyRowMapper做映射返回对象</span></span><br><span class="line">String sql = <span class="string">"select * from product where id = ? "</span>;</span><br><span class="line">Product product = template.queryForObject</span><br><span class="line">(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Product<span class="class">.<span class="keyword">class</span>), 4)</span>;</span><br><span class="line"><span class="comment">// 上面为单条记录（对象实体）   下面为多条记录（对象实体）</span></span><br><span class="line">String sql = <span class="string">"select * from product"</span>;        </span><br><span class="line">List&lt;Product&gt; list = jdbcTemplate.query</span><br><span class="line">(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Product<span class="class">.<span class="keyword">class</span>))</span>;</span><br></pre></td></tr></table></figure><h6 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a>Tips:</h6><p>​    在做查询时第四种方法使用最多，需要保证实体类的属性名称及数据类型和数据库表中的字段名称类型要保持一致。当然也可以进行自行的查询实体封装：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"select * from product "</span>;</span><br><span class="line"><span class="comment">// 执行sql并接收结果集  参数1: sql语句</span></span><br><span class="line"><span class="comment">// 参数2: rowMapper: 本条记录,自行封装</span></span><br><span class="line">List&lt;Product&gt; list = template.query(sql, <span class="keyword">new</span> RowMapper&lt;Product&gt;()&#123;</span><br><span class="line"> <span class="meta">@Override</span>  <span class="comment">// resultSet: 被遍历到的本条记录 i: 索引值</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Product <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> i)</span><span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line">     Product pro = <span class="keyword">new</span> Product();</span><br><span class="line">     pro.setId(rs.getInt(<span class="string">"id"</span>));</span><br><span class="line">     pro.setPname(rs.getString(<span class="string">"pname"</span>));</span><br><span class="line">     pro.setPrice(rs.getDouble(<span class="string">"price"</span>));</span><br><span class="line">     <span class="keyword">return</span> pro;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="2-数据库元数据"><a href="#2-数据库元数据" class="headerlink" title="2. 数据库元数据:"></a>2. 数据库元数据:</h1><hr><p>元数据：数据库、表、列的定义信息。</p><h5 id="ParameterMetaData"><a href="#ParameterMetaData" class="headerlink" title="ParameterMetaData"></a>ParameterMetaData</h5><h6 id="作用"><a href="#作用" class="headerlink" title="作用:"></a>作用:</h6><p>​    获取PreparedStatement所编译的sql语句中 ? 的个数和类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"select * </span></span><br><span class="line"><span class="string">from user where username = ? and password = ? "</span>;</span><br><span class="line">PreparedStatement pst = conn.PrepareStatement(sql);</span><br></pre></td></tr></table></figure><h6 id="API"><a href="#API" class="headerlink" title="API"></a>API</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PreparedStatement. getParameterMetaData(); </span><br><span class="line"><span class="comment">//int getParameterCount() </span></span><br><span class="line"><span class="comment">//获取PreparedStatement的SQL语句参数？的个数</span></span><br><span class="line"><span class="comment">//int getParameterType(int param) </span></span><br><span class="line"><span class="comment">//获取指定参数的SQL类型。</span></span><br><span class="line"><span class="comment">//不是所有的数据库都支持,mysql不支持</span></span><br></pre></td></tr></table></figure><h5 id="ResultSetMetaData"><a href="#ResultSetMetaData" class="headerlink" title="ResultSetMetaData"></a>ResultSetMetaData</h5><h6 id="作用-1"><a href="#作用-1" class="headerlink" title="作用:"></a>作用:</h6><p>​    可用于获取有关 ResultSet 对象中列的类型和属性的信息。</p><p>ResultSetMetaData </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如何获取 ResultSetMetaData</span></span><br><span class="line"><span class="comment">//ResultSet.getMetaData()</span></span><br><span class="line"><span class="comment">//int getColumnCount() </span></span><br><span class="line"><span class="comment">//返回此 ResultSet 对象中的列数</span></span><br><span class="line"><span class="comment">//String getColumnName(int column) </span></span><br><span class="line"><span class="comment">//获取指定列的名称</span></span><br><span class="line"><span class="comment">//String getColumnTypeName(int column) </span></span><br><span class="line"><span class="comment">//获取指定列的数据库特定类型名称</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;​    通过 Jdbc 、C3P0 、Druid 的使用我们会发现即使我们做了工具的封装，但重复性的代码依旧很多。今天我们通过 JdbcTemplate 即 Jdbc 模板来使我们的代码更加简洁，逻辑更加清晰。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://songhui.club/source/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="JDBC" scheme="http://songhui.club/source/tags/JDBC/"/>
    
      <category term="数据库" scheme="http://songhui.club/source/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>JDBC和数据库连接池</title>
    <link href="http://songhui.club/%E6%95%B0%E6%8D%AE%E5%BA%93/2020/jdbc-pool.html"/>
    <id>http://songhui.club/%E6%95%B0%E6%8D%AE%E5%BA%93/2020/jdbc-pool.html</id>
    <published>2020-01-11T09:04:40.000Z</published>
    <updated>2020-01-11T11:12:08.936Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>​    程序就是有输入，有处理，有输出。那在这过程中所流转的便是至关重要的数据，因此，用以保存数据的数据库操作是我们不得不掌握的知识。今天先从简单的 jdbc使用和数据库连接池的创建开始了解。</p><a id="more"></a><hr><h1 id="1-JDBC"><a href="#1-JDBC" class="headerlink" title="1. JDBC"></a>1. JDBC</h1><h2 id="1-1基本使用"><a href="#1-1基本使用" class="headerlink" title="1.1基本使用"></a>1.1基本使用</h2><ul><li>使用 JDBC 操作MySQL数据库时，可以将步骤分为以下7步：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.注册驱动(将mysql的驱动类加载到内存中)</span></span><br><span class="line">DriverManager.registerDriver(<span class="keyword">new</span> Driver());</span><br><span class="line"><span class="comment">// 2.获取连接</span></span><br><span class="line">String url = <span class="string">"jdbc:mysql://localhost:3306/db"</span>;</span><br><span class="line">String username = <span class="string">"root"</span>;</span><br><span class="line">String password = <span class="string">"root"</span>;</span><br><span class="line">Connection con = DriverManager.getConnection(url, username, password);</span><br><span class="line"><span class="comment">// 3.编写sql</span></span><br><span class="line">String sql = <span class="string">" ... "</span>;</span><br><span class="line"><span class="comment">// 4.获取语句的执行器</span></span><br><span class="line">Statement statement = con.createStatement();</span><br><span class="line"><span class="comment">// 5.执行sql并返回结果集</span></span><br><span class="line">ResultSet rs = statement.excuteQuery(sql);</span><br><span class="line"><span class="comment">// 6.处理结果集</span></span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123; ... &#125;</span><br><span class="line"><span class="comment">// 7.释放资源</span></span><br><span class="line">rs.close();</span><br><span class="line">statement.close();</span><br><span class="line">con.close();</span><br></pre></td></tr></table></figure><p><strong>PreparedStatement:预编译对象</strong> ： 未防止 SQL 注入，我们先将sql 传给数据库，将sql语句事先编译好，使用时直接赋真实值，执行sql即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 ？ 占位</span></span><br><span class="line">String sql = <span class="string">"select * from stu where id= ? "</span></span><br><span class="line"><span class="comment">// 创建预编译对象</span></span><br><span class="line">PreparedStatement pst = con.prepareStatement(sql);</span><br><span class="line"><span class="comment">// 设置具体的参数 （第几个 ？， 具体值）</span></span><br><span class="line">pst.set(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 执行sql</span></span><br><span class="line">ResultSet rs = pst.executeQuery();</span><br><span class="line"><span class="keyword">int</span> i = pst.executeUpdate();</span><br></pre></td></tr></table></figure><h2 id="1-2封装优化"><a href="#1-2封装优化" class="headerlink" title="1.2封装优化"></a>1.2封装优化</h2><p>​    由于Driver类的源码当中有注册驱动的静态代码块，因此我们可以不用自己再去注册（类加载后就完成了注册），同时为了避免硬编码和代码冗余我们将其优化，封装成简单工具类。</p><h3 id="1-2-1编写配置文件-：Jdbc-properties"><a href="#1-2-1编写配置文件-：Jdbc-properties" class="headerlink" title="1.2.1编写配置文件 ：Jdbc.properties"></a><strong>1.2.1编写配置文件 ：Jdbc.properties</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 数据库驱动配置</span><br><span class="line"># Driver类的全限定类名（加载即完成注册）</span><br><span class="line">jdbc.driver&#x3D;com.mysql.jdbc.Driver</span><br><span class="line">#        协议  协议   地址       端口  数据库</span><br><span class="line">jdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;db</span><br><span class="line"># 用户名</span><br><span class="line">jdbc.username&#x3D;root</span><br><span class="line"># 密码</span><br><span class="line">jdbc.password&#x3D;root</span><br></pre></td></tr></table></figure><h3 id="1-2-2编写工具类-：JdbcUtils"><a href="#1-2-2编写工具类-：JdbcUtils" class="headerlink" title="1.2.2编写工具类 ：JdbcUtils"></a>1.2.2<strong>编写工具类</strong> ：JdbcUtils</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">//声明配置信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Connection con;</span><br><span class="line">    <span class="comment">//静态代码块,类加载时解析配置信息</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStreamReader is = <span class="keyword">new</span> InputStreamReader</span><br><span class="line">                (JdbcUtils.class.getResourceAsStream("/jdbc.properties"));</span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            properties.load(is);</span><br><span class="line">            driver = properties.getProperty(<span class="string">"jdbc.driver"</span>).trim();</span><br><span class="line">            url = properties.getProperty(<span class="string">"jdbc.url"</span>).trim();</span><br><span class="line">            username = properties.getProperty(<span class="string">"jdbc.username"</span>).trim();  </span><br><span class="line">            password = properties.getProperty(<span class="string">"jdbc.password"</span>).trim();</span><br><span class="line">            <span class="comment">//加载驱动获取连接</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            con =  DriverManager.getConnection(url, username, password);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 获取数据库连接（如果连接关闭则重新创建）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (con.isClosed()) &#123;</span><br><span class="line">                con =  DriverManager.getConnection(</span><br><span class="line">                    url,username,password);</span><br><span class="line">                <span class="keyword">return</span> con;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> con;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 关闭资源（有结果集）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet rs, Statement s, </span></span></span><br><span class="line"><span class="function"><span class="params">                             Connection con)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                s.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (con != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                con.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 关闭资源（无结果集）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement s, Connection con)</span> </span>&#123;</span><br><span class="line">        close(<span class="keyword">null</span>, s, con);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-3注意事项"><a href="#1-2-3注意事项" class="headerlink" title="1.2.3注意事项"></a>1.2.3注意事项</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要注意的是</span></span><br><span class="line"><span class="comment">// 1.将jdbc.properties放到src文件下</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.解析配置文件时除上述写法还可以使用如下方式(此法针对src下的properties文件)：</span></span><br><span class="line">ResourceBundle bundle = ResourceBundle.getBundle(<span class="string">"jdbc"</span>);</span><br><span class="line">driver = bundle.getString(<span class="string">"jdbc.driver"</span>).trim();</span><br><span class="line">url = bundle.getString(<span class="string">"jdbc.url"</span>).trim();</span><br><span class="line">username = bundle.getString(<span class="string">"jdbc.username"</span>).trim();</span><br><span class="line">password = bundle.getString(<span class="string">"jdbc.password"</span>).trim();</span><br></pre></td></tr></table></figure><hr><p><strong>在使用上述方法连接并操作数据库时，若没有按照上面的代码对连接的状态进行检查那么肯定会遇到这样一个异常：No operations allowed after connection closed. 因为我们只创建了一个连接，当完成一个操作后将其关闭，那么下一次操作获得的连接就是已经关闭了的连接，因此会发生此异常！上述代码中对连接进行了状态的判断，比较麻烦。而数据库连接池正是维护着几个连接供我们使用，使用后将其归还至连接池（并不是真的关闭）。</strong></p><h1 id="2-C3P0"><a href="#2-C3P0" class="headerlink" title="2. C3P0"></a>2. C3P0</h1><p>​    C3P0是开源的连接池，Hibernate框架默认使用的就是C3P0连接池。使用配置文件创建连接池时注意文件名称“ c3p0-config.xml”不能更改（放在src下）。</p><h2 id="2-1创建配置文件：c3p0-config-xml"><a href="#2-1创建配置文件：c3p0-config-xml" class="headerlink" title="2.1创建配置文件：c3p0-config.xml"></a>2.1创建配置文件：c3p0-config.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 使用默认的配置读取连接池对象 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">default-config</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  连接参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>&gt;</span>jdbc:mysql://localhost:3306/db<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 连接池参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"checkoutTimeout"</span>&gt;</span>3000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">default-config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  指定名称的配置信息 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">"myc3p0"</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!--  连接参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>&gt;</span>jdbc:mysql://localhost:3306/day25<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 连接池参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span>&gt;</span>8<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"checkoutTimeout"</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2获取连接池对象"><a href="#2-2获取连接池对象" class="headerlink" title="2.2获取连接池对象"></a>2.2获取连接池对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关键代码</span></span><br><span class="line"><span class="comment">// 使用默认配置获取连接池对象</span></span><br><span class="line">ComboPooledDataSource comboPooledDataSource =</span><br><span class="line">    <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line"><span class="comment">// 使用指定的配置  （配置名） 获取连接池对象</span></span><br><span class="line">ComboPooledDataSource comboPooledDataSource = </span><br><span class="line">    <span class="keyword">new</span> ComboPooledDataSource(<span class="string">"myc3p0"</span>);</span><br></pre></td></tr></table></figure><h1 id="3-DRUID"><a href="#3-DRUID" class="headerlink" title="3. DRUID"></a>3. DRUID</h1><p><strong>DRUID是阿里巴巴开发的目前最好的数据库连接池。 com.alibaba.druid.pool.DruidDataSourceFactory 类创建连接池的方法：</strong></p><h2 id="3-1创建配置文件：mydruid-properties"><a href="#3-1创建配置文件：mydruid-properties" class="headerlink" title="3.1创建配置文件：mydruid.properties"></a>3.1创建配置文件：mydruid.properties</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">driverClassName&#x3D;com.mysql.jdbc.Driver</span><br><span class="line">url&#x3D;jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;db</span><br><span class="line">username&#x3D;root</span><br><span class="line">password&#x3D;root</span><br><span class="line">initialSize&#x3D;5</span><br><span class="line">maxActive&#x3D;10</span><br><span class="line">maxWait&#x3D;3000</span><br><span class="line">minIdle&#x3D;3  # 最小连接池数量</span><br></pre></td></tr></table></figure><h2 id="3-2获取连接池对象"><a href="#3-2获取连接池对象" class="headerlink" title="3.2获取连接池对象"></a>3.2获取连接池对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">InputStream is = DruidDemo<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>().</span></span><br><span class="line">    getResourceAsStream("mydruid.properties");</span><br><span class="line">prop.load(is);</span><br><span class="line"><span class="comment">//druid工厂根据配置文件创建druid连接池对象</span></span><br><span class="line">DataSource dataSource = DruidDataSourceFactory.createDataSource(prop);</span><br></pre></td></tr></table></figure><h2 id="3-3DRUID工具类封装"><a href="#3-3DRUID工具类封装" class="headerlink" title="3.3DRUID工具类封装"></a>3.3DRUID工具类封装</h2><h3 id="3-3-1配置文件（参上）"><a href="#3-3-1配置文件（参上）" class="headerlink" title="3.3.1配置文件（参上）"></a>3.3.1配置文件（参上）</h3><h3 id="3-3-2关键代码"><a href="#3-3-2关键代码" class="headerlink" title="3.3.2关键代码"></a>3.3.2关键代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource;</span><br><span class="line"> <span class="keyword">static</span>&#123;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">// 解析druid的配置文件</span></span><br><span class="line">         Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">         InputStream is = JDBCUtil<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>().</span></span><br><span class="line">             getResourceAsStream("druid.properties");</span><br><span class="line">         prop.load(is);</span><br><span class="line">         <span class="comment">// druid工厂使用配置文件创建druid连接池对象</span></span><br><span class="line">         dataSource = DruidDataSourceFactory.createDataSource(prop);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//获取druid连接池</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">return</span> dataSource;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//获取druid连接池中的连接</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//释放资源(归还连接)</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet rs, Statement st,Connection conn)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(rs!=<span class="keyword">null</span>)&#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             rs.close();</span><br><span class="line">         &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(st!=<span class="keyword">null</span>)&#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             st.close();</span><br><span class="line">         &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)&#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             conn.close();</span><br><span class="line">         &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement st,Connection conn)</span> </span>&#123;</span><br><span class="line">     close(<span class="keyword">null</span>,st,conn);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a>Tips:</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将properties文件放到src下时</span></span><br><span class="line">JdbcUtils.class.getResourceAsStream("/jdbc.properties")</span><br><span class="line"><span class="comment">//两种方式的参数不一样</span></span><br><span class="line">JdbcUtils.class.getClassLoader().getResourceAsStream("jdbc.properties")</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;​    程序就是有输入，有处理，有输出。那在这过程中所流转的便是至关重要的数据，因此，用以保存数据的数据库操作是我们不得不掌握的知识。今天先从简单的 jdbc使用和数据库连接池的创建开始了解。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://songhui.club/source/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="JDBC" scheme="http://songhui.club/source/tags/JDBC/"/>
    
      <category term="数据库" scheme="http://songhui.club/source/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>开篇</title>
    <link href="http://songhui.club/%E5%BF%83%E8%AF%AD/2020/helloWorld.html"/>
    <id>http://songhui.club/%E5%BF%83%E8%AF%AD/2020/helloWorld.html</id>
    <published>2020-01-09T13:50:43.000Z</published>
    <updated>2020-01-12T14:32:00.518Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>​    似乎每一个写博客的 Coder 都想有属于自己的站，用心的装饰她，打理她。好像只有在这里才能放松自己，让自己轻松片刻一般。</p><a id="more"></a><hr><p>​    最开始写博客时是因为想要把自己在学习工作中遇到的问题总结记录下来，方便日后查阅。实践证明，写博客是一个不错的选择。在众多博客体系中如何选择呢？我个人比较喜欢博客园的风格（主要是广告少，还能自定义主题），所以我在去年果断注册了博客园的账号，将自己之前的总结统统发布。可自己总担心万一有一天博客园没了呢？我该怎么办？于是乎，便参考网上诸多达人的博客，最终选择使用Hexo 搭建自己管理的博客。起初是大算将其部署到GitHub上的，只是在国内访问实在太慢。于是转战码云，好嘛，自定义域名还要收费？所以我选择了腾讯的Coding，效果还不错。自己也购买过腾讯的服务器和诸多域名（homepython.com|justdoai.com 等）闲来无事总想着以后搞点事情，先把域名注册了，哈哈。</p><p>​    码农的进阶历程：初级码农问朋友同事，初中级码农百度谷歌，中级码农官方文档API，中高级码农源码剖析搞事情，高级码农闲来无事造车轮。自知自己是面向百度编程，于是便有了此站以记录自己的那些坑坑洼洼。如若一年半载未有更新，那博主不是进阶中高级成功了就是转行去卖烤冷面了哈哈。</p><p>​    有一天突然发现腾讯有一个推广奖励，想自己搭服务器的朋友可以通过（<a href="https://songhui.club/about/me.html">关于我</a>）页签下的腾讯产品链接购买，腾讯会给博主一点点奖励金。（如果25周岁以下记得可以享受学生优惠哦，不验学生证的那种）</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;​    似乎每一个写博客的 Coder 都想有属于自己的站，用心的装饰她，打理她。好像只有在这里才能放松自己，让自己轻松片刻一般。&lt;/p&gt;
    
    </summary>
    
    
      <category term="心语" scheme="http://songhui.club/source/categories/%E5%BF%83%E8%AF%AD/"/>
    
    
      <category term="hello world" scheme="http://songhui.club/source/tags/hello-world/"/>
    
  </entry>
  
</feed>
